{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# A4 - \u91cf\u5b50\u30a4\u30b8\u30f3\u30b0\u6a21\u578b"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "view-in-github"
            },
            "source": [
                "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/source/ja/A004-QuantumSystem.ipynb)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "view-in-github"
            },
            "source": [
                "\u3053\u306e\u7ae0\u3067\u306f\u91cf\u5b50 (\u4e3b\u306b\u6a2a\u78c1\u5834)\u52b9\u679c\u306e\u5165\u3063\u305f\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002  \n",
                "\u307e\u305a\u306fGraph\u3092\u5b9a\u7fa9\u3057\u3001$J_{ij}, h_i$\u3092\u6c7a\u5b9a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.graph as G\n",
                "#\u554f\u984c\u30b5\u30a4\u30ba\u3092100\u3068\u3057\u307e\u3059\u3002\n",
                "N = 100\n",
                "\n",
                "graph = G.Dense(N)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": [
                "import numpy as np\n",
                "mu, sigma = 0, 1\n",
                "\n",
                "for i in range(N):\n",
                "    for j in range(N):\n",
                "        #Jij\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5168\u4f53\u306e\u4fc2\u6570\u30921/N\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "        graph[i,j] = 0 if i == j else np.random.normal()/N\n",
                "\n",
                "for i in range(N):\n",
                "    graph[i] = np.random.normal()/N"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u30b0\u30e9\u30d5\u306e\u8a2d\u5b9a\u65b9\u6cd5\u306f\u524d\u7ae0\u3068\u540c\u3058\u3067\u3059\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## \u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a \u6a2a\u78c1\u5834\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\n",
                "\n",
                "\u4eca\u56de\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u6a2a\u78c1\u5834\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\n",
                "\n",
                "\\begin{align}\n",
                "H &= s \\left(\\sum_{i<j}J_{ij}\\sigma_i^z \\sigma_j^z + \\sum_{i=1}^{N}h_i \\sigma_i^z \\right) - \\sum_{i=1}\\Gamma (1-s) \\sigma_i^x \\\\\n",
                "\\end{align}\n",
                "\n",
                "\u3092\u7528\u3044\u307e\u3059\u3002\n",
                "\n",
                "$\\Gamma$\u306f\u56fa\u5b9a\u3055\u308c\u305f\u307e\u307e\u3001$\\beta$\u3001$s$\u3092\u5909\u5316\u3055\u305b\u3066\u91cf\u5b50\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u884c\u3044\u307e\u3059\u3002\n",
                "\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u9234\u6728\u30fb\u30c8\u30ed\u30c3\u30bf\u30fc\u5206\u89e3\u306b\u3088\u308b\u91cf\u5b50\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "> \u9023\u7d9a\u865a\u6642\u9593\u91cf\u5b50\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3082\u7528\u610f\u3057\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u73fe\u5728\u8a66\u9a13\u7684\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "\u307e\u305a\u306f\u30b7\u30b9\u30c6\u30e0\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002`system.make_transverse_ising`\u3067\u751f\u6210\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.system as S\n",
                "\n",
                "mysystem = S.make_transverse_ising(graph.gen_spin(), graph, 1.0, 4)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u3053\u3067\u30011\u3064\u76ee\u306e\u5f15\u6570\u306b\u306f\u30b9\u30d4\u30f3\u5217\u3092\u30012\u3064\u76ee\u306b\u306f\u30b0\u30e9\u30d5\u30013\u3064\u76ee\u306b\u306f$\\Gamma$\u306e\u5024\u30014\u3064\u76ee\u306b\u306ftrotter\u30b9\u30e9\u30a4\u30b9\u306e\u6570\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n",
                "\u3053\u308c\u3067\u3001\u5168\u3066\u306etrotter\u30b9\u30e9\u30a4\u30b9\u304c `graph.gen_spin()`\u3067\u521d\u671f\u5316\u3055\u308c\u305f\u30b7\u30b9\u30c6\u30e0\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "`mysystem.trotter_spins`\u3067\u5168\u3066\u306etrotter\u30b9\u30d4\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u7e26\u65b9\u5411\u304c\u7a7a\u9593\u65b9\u5411\u3001\u6a2a\u65b9\u5411\u304ctrotter\u65b9\u5411\u3067\u3059\u3002\n",
                "\u5168\u3066\u306etrotter\u30b9\u30e9\u30a4\u30b9\u304c\u540c\u3058\u30b9\u30d4\u30f3\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [-1. -1. -1. -1.]\n",
                        " [ 1.  1.  1.  1.]\n",
                        " [ 1.  1.  1.  1.]]\n"
                    ]
                }
            ],
            "source": [
                "print(mysystem.trotter_spins)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "> `graph.gen_spin()`\u306e\u4ee3\u308f\u308a\u306b\u4e0a\u306e\u4e8c\u91cdList\u3092\u5165\u308c\u3066\u76f4\u63a5trotter\u30b9\u30d4\u30f3\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "## \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u884c -Updater, Algorithm-\n",
                "\n",
                "### Updater\n",
                "\n",
                "\u91cf\u5b50\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u5bfe\u3057\u3066\u306f\u3001\u73fe\u72b6\n",
                "\n",
                "* SingleSpinFlip (\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30fb\u30d8\u30a4\u30b9\u30c6\u30a3\u30f3\u30b0\u6cd5\u306b\u3088\u308b\u30b9\u30d4\u30f31\u3064\u305a\u3064\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8)\n",
                "\n",
                "\u304c\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n",
                "\n",
                "### Algorithm\n",
                "\n",
                "#### \u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\n",
                "\n",
                "\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\u306f`(\u30d1\u30e9\u30e1\u30fc\u30bf, \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u6570)`\u306e\u30ea\u30b9\u30c8\u3067\u4e0e\u3048\u3089\u308c\u3001\u6a2a\u78c1\u5834\u30a4\u30b8\u30f3\u30b0\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u306f(($\\beta$, $s$), \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u6570)\u3067\u4e0e\u3048\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [],
            "source": [
                "schedule_list = [((10, 0.1), 10),((12, 0.3), 80),((10, 0.8), 30)]"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306e\u5834\u5408\u3001\u9006\u6e29\u5ea6$\\beta=10, s=0.1$\u306710\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3001$\\beta=12, s=0.3$\u306780\u30b9\u30c6\u30c3\u30d7\u3001$\\beta=0.1, s=0.8$\u306730\u30b9\u30c6\u30c3\u30d7\u306e\u8a08120\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002  \n",
                "\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`utility`\u306b\u3042\u308b`make_transeverse_field_schedule_list`\u3092\u4f7f\u3046\u3068\u3088\u308a\u4fbf\u5229\u3067\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[((beta: 10.000000, s: 0.000000) mcs: 20), ((beta: 10.000000, s: 0.111111) mcs: 20), ((beta: 10.000000, s: 0.222222) mcs: 20), ((beta: 10.000000, s: 0.333333) mcs: 20), ((beta: 10.000000, s: 0.444444) mcs: 20), ((beta: 10.000000, s: 0.555556) mcs: 20), ((beta: 10.000000, s: 0.666667) mcs: 20), ((beta: 10.000000, s: 0.777778) mcs: 20), ((beta: 10.000000, s: 0.888889) mcs: 20), ((beta: 10.000000, s: 1.000000) mcs: 20)]\n"
                    ]
                }
            ],
            "source": [
                "import cxxjij.utility as U\n",
                "schedule_list = U.make_transverse_field_schedule_list(10, 20, 10)\n",
                "print(schedule_list)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u4e0a\u306e\u4f8b\u3067\u306f$\\beta=10$\u3067\u56fa\u5b9a\u3057\u306a\u304c\u3089$s=0$\u304b\u3089$s=1$\u307e\u3067\u3001\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306720\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u8a08\u7b97\u3057\u306a\u304c\u308910\u6bb5\u968e\u3067$s$\u3092\u5909\u3048\u3066\u3044\u304f\u8a2d\u5b9a\u4f8b\u3067\u3059\u3002\u8a08200\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n",
                "$s$\u306e\u5909\u5316\u306b\u3064\u3044\u3066\u306f[Morita, Nishimori (2008)](https://aip.scitation.org/doi/10.1063/1.2995837)\u306e\u624b\u6cd5\u3092\u9069\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "#### Algorithm\u306e\u5b9f\u884c\n",
                "\n",
                "\u7d9a\u3044\u3066\u3001Algorithm\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u524d\u7ae0\u3068\u5168\u304f\u540c\u3058\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.algorithm as A\n",
                "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u524d\u7ae0\u3068\u540c\u3058\u3088\u3046\u306bcallback\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6a2a\u78c1\u5834\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306e\u5834\u5408\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u3068\u30d1\u30e9\u30e1\u30fc\u30bf (\u9006\u6e29\u5ea6$\\beta$\u3001$s$)\u3092\u5f15\u6570\u3092\u6301\u3064\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002  \n",
                "\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u3067\u306f\u30b7\u30b9\u30c6\u30e0\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5024\u3092\u8a18\u9332\u3059\u308bcallback\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [],
            "source": [
                "energies = []\n",
                "\n",
                "def callback_log_energy(system, t):\n",
                "    #graph\u306f\u4ee5\u524d\u306bGraph\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3066\u5b9a\u7fa9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\n",
                "    #\u5404trotter\u30b9\u30e9\u30a4\u30b9\u306e\u5e73\u5747\u5024\u304b\u3089\u3001\u53e4\u5178\u30b9\u30d4\u30f3\u306e0\u30011\u3092\u6c7a\u3081\u307e\u3059\u3002\n",
                "    classical_spin = [-1 if np.mean(s)<0 else 1 for s in system.trotter_spins[:-1]] #\u6700\u5f8c\u306e\u30b9\u30d4\u30f3\u306f\u88dc\u52a9\u30b9\u30d4\u30f3\u306e\u305f\u3081\u3001\u9664\u304f\n",
                "    energies.append(graph.calc_energy(classical_spin))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306ecallback\u3092\u7528\u3044\u3066\u540c\u3058Algorithm\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [],
            "source": [
                "#\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u3082\u3063\u3068\u9577\u304f\u53d6\u308a\u307e\u3059 (\u8a0820000\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7)\n",
                "schedule_list = U.make_transverse_field_schedule_list(10, 200, 100)\n",
                "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list, callback_log_energy)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u8a18\u9332\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u3001\u6a2a\u8ef8\u3092\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3001\u7e26\u8ef8\u3092\u30a8\u30cd\u30eb\u30ae\u30fc\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "!pip install matplotlib"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "%matplotlib inline\n",
                "import matplotlib.pyplot as plt\n",
                "plt.plot(range(len(energies)), energies)\n",
                "plt.xlabel('Monte Carlo step')\n",
                "plt.ylabel('energy')\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## \u7d50\u679c\u306e\u53d6\u5f97 -Result-\n",
                "\n",
                "`result.get_solutions`\u3067\u8a08\u7b97\u7d50\u679c\u3067\u3042\u308b\u53e4\u5178\u30b9\u30d4\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u89b3\u70b9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3092\u5f53\u3066\u3066\u3044\u308b\u305f\u3081\u3001trotter\u30b9\u30e9\u30a4\u30b9\u306e\u4e2d\u3067\u3082\u3063\u3068\u3082\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4f4e\u3044\u30b9\u30d4\u30f3\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1]\n"
                    ]
                }
            ],
            "source": [
                "import cxxjij.result as R\n",
                "print(R.get_solution(mysystem))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## C++ core interface"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "```cpp\n",
                "#include <graph/all.hpp>\n",
                "#include <system/all.hpp>\n",
                "#include <updater/all.hpp>\n",
                "#include <algorithm/all.hpp>\n",
                "#include <result/all.hpp>\n",
                "#include <utility/schedule_list.hpp>\n",
                "#include <utility/random.hpp>\n",
                "#include <random>\n",
                "\n",
                "#include <iostream>\n",
                "\n",
                "using namespace openjij;\n",
                "\n",
                "int main(void){\n",
                "\n",
                "    //generate dense graph with size N=100\n",
                "    constexpr std::size_t N = 100;\n",
                "    auto dense = graph::Dense<double>(N);\n",
                "\n",
                "    //generate random engine\n",
                "    auto rand_engine = std::mt19937(0x1234);\n",
                "    //of course you can specify another random generator that is compatible with C++ random generator, say utility::Xorshift,\n",
                "    //auto rand_engine = utility::Xorshift(0x1234);\n",
                "\n",
                "    //Gaussian distribution\n",
                "    auto gauss = std::normal_distribution<>{0, 1};\n",
                "\n",
                "    //set interactions\n",
                "    for(std::size_t i=0; i<N; i++){\n",
                "        for(std::size_t j=0; j<N; j++){\n",
                "            dense.J(i, j) = (i == j) ? 0 : gauss(rand_engine)/N;\n",
                "        }\n",
                "    }\n",
                "\n",
                "    //set local fields\n",
                "    for(std::size_t i=0; i<N; i++){\n",
                "        dense.h(i) = gauss(rand_engine);\n",
                "    }\n",
                "\n",
                "    //create transverse Ising system\n",
                "    auto system = system::make_transverse_ising(dense.gen_spin(rand_engine), dense, 1.0, 4);\n",
                "\n",
                "    //generate schedule list\n",
                "    auto schedule_list = utility::make_transverse_field_schedule_list(10, 20, 10);\n",
                "\n",
                "    //do annealing (updater: SingleSpinFlip)\n",
                "    algorithm::Algorithm<updater::SingleSpinFlip>::run(system, rand_engine, schedule_list);\n",
                "\n",
                "    //show spins\n",
                "    std::cout << \"The result spins are [\";\n",
                "    for(auto&& elem : result::get_solution(system)){\n",
                "        std::cout << elem << \" \";\n",
                "    }\n",
                "\n",
                "    std::cout << \"]\" << std::endl;\n",
                "}\n",
                "```"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.5"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}