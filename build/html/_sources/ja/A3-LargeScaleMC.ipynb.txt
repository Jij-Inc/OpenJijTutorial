{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# A3 - \u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "view-in-github"
            },
            "source": [
                "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/source/ja/A3-LargeScaleMC.ipynb)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306e\u7ae0\u3067\u306fOpenJij\u306ecore interface (core python interface)\u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3001\u7c21\u5358\u306a\u8a08\u7b97\u306e\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\n",
                "\n",
                "core interface\u306f\u524d\u56de\u307e\u3067\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3088\u308a\u3082\u4e0b\u90e8\u306e\u30ec\u30a4\u30e4\u30fc\u306eAPI\u3068\u306a\u308b\u305f\u3081\u3001\u5bfe\u8c61\u8aad\u8005\u3068\u3057\u3066\u306f\u524d\u56de\u307e\u3067\u306eOpenJij\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u4e00\u901a\u308a\u7d42\u3048\u3066\u3001\u30a4\u30b8\u30f3\u30b0\u30e2\u30c7\u30eb\u3084\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306a\u3069\u306e\u7528\u8a9e\u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u3092\u60f3\u5b9a\u3057\u3066\u304a\u308a\u3001\n",
                "\n",
                "* \u6700\u9069\u5316\u554f\u984c\u3060\u3051\u3067\u306a\u304f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3084\u7814\u7a76\u7528\u9014\u306a\u3069\u3088\u308a\u5c02\u9580\u7684\u306a\u7528\u9014\u306bOpenJij\u3092\u7528\u3044\u305f\u3044\n",
                "* \u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u306e\u8a2d\u5b9a\u3084\u4f7f\u7528\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7b49\u3092\u76f4\u63a5\u89e6\u308a\u305f\u3044\n",
                "\n",
                "\u3068\u3044\u3063\u305f\u76ee\u7684\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.graph as G\n",
                "#\u554f\u984c\u30b5\u30a4\u30ba\u3092100\u3068\u3057\u307e\u3059\u3002\n",
                "N = 100\n",
                "\n",
                "graph = G.Dense(N)\n",
                "#sparse\u306e\u5834\u5408\n",
                "#graph = G.Sparse(N)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "$J_{ij}, h_i$\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u5e73\u57470\u3001\u6a19\u6e96\u504f\u5dee1\u306eGauss\u5206\u5e03\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "!pip install numpy #\u4e71\u6570\u751f\u6210\u306bnumpy\u3092\u4f7f\u3044\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": [
                "import numpy as np\n",
                "mu, sigma = 0, 1\n",
                "\n",
                "for i in range(N):\n",
                "    for j in range(N):\n",
                "        #Jij\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5168\u4f53\u306e\u4fc2\u6570\u30921/N\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "        graph[i,j] = 0 if i == j else np.random.normal()/N\n",
                "\n",
                "for i in range(N):\n",
                "    graph[i] = np.random.normal()/N"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u3053\u3067\u3001\u7e26\u78c1\u5834\u306b\u95a2\u3057\u3066\u306f\u3001`graph[i]`\u3067\u3082\u3001`graph[i,i]`\u3067\u3082\u3069\u3061\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "\u307e\u305f\u3001\u30a4\u30b8\u30f3\u30b0\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u4e0a\u3001$J_{ij}$\u3068$J_{ji}$\u306f\u81ea\u52d5\u3067\u540c\u3058\u5024\u3068\u306a\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "0.5\n",
                        "0.5\n",
                        "-0.6\n",
                        "-0.6\n"
                    ]
                }
            ],
            "source": [
                "graph[20] = 0.5\n",
                "print(graph[20,20])\n",
                "print(graph[20])\n",
                "graph[12,34] = -0.6\n",
                "print(graph[12,34])\n",
                "print(graph[34,12])"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## \u30b7\u30b9\u30c6\u30e0\u306e\u8a2d\u5b9a - System -\n",
                "\n",
                "\u7d9a\u3044\u3066\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u304b\u6a2a\u78c1\u5834\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u304b\u3001\u307e\u305f\u5225\u306e\u6a21\u578b\u306b\u3059\u308b\u304b\u7b49\u3092\u9078\u3079\u307e\u3059\u3002\n",
                "\n",
                "\u307e\u305a\u306f\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002`system.make_classical_ising`\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.system as S\n",
                "\n",
                "mysystem = S.make_classical_ising(graph.gen_spin(), graph)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u3053\u3067\u3001\u5f15\u6570\u306e1\u3064\u3081\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u30b9\u30d4\u30f3\u30012\u3064\u3081\u306fGraph\u305d\u306e\u3082\u306e\u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002  \n",
                "\u3053\u308c\u306b\u3088\u308a\u521d\u671f\u30b9\u30d4\u30f3\u914d\u4f4d\u304c`graph.gen_spin()`\u3068\u306a\u308b\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306e\u30b7\u30b9\u30c6\u30e0\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "\u30b7\u30b9\u30c6\u30e0\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u5024\u3092\u8aad\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[ 1. -1.  1.  1. -1.  1.  1. -1.  1. -1. -1.  1. -1. -1.  1.  1. -1.  1.\n",
                        "  1.  1. -1.  1. -1.  1. -1.  1. -1. -1. -1. -1.  1. -1.  1.  1.  1. -1.\n",
                        " -1. -1.  1.  1. -1. -1.  1.  1. -1.  1. -1. -1. -1. -1.  1.  1. -1.  1.\n",
                        "  1.  1. -1.  1.  1. -1. -1.  1. -1.  1. -1. -1.  1. -1. -1. -1.  1. -1.\n",
                        "  1. -1. -1.  1.  1.  1. -1.  1.  1. -1. -1. -1.  1.  1.  1.  1.  1.  1.\n",
                        " -1.  1. -1. -1.  1. -1.  1.  1. -1. -1.  1.]\n"
                    ]
                }
            ],
            "source": [
                "print(mysystem.spin)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u4ee5\u5916\u306b\u3082\u69d8\u3005\u306a\u30b7\u30b9\u30c6\u30e0\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u7528\u9014\u5225\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u307e\u305f\u3001System\u306b\u3088\u3063\u3066\u521d\u671f\u5316\u306e\u65b9\u6cd5\u306f\u591a\u5c11\u7570\u306a\u308a\u307e\u3059\u3002  \n",
                "\u5f8c\u307b\u3069\u5c11\u3057\u305a\u3064\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n",
                "\n",
                "## \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u884c -Updater, Algorithm-\n",
                "\n",
                "System\u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u306fUpdater\u3092\u9078\u629e\u3057\u3066Algorithm\u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002  \n",
                "System\u306b\u5927\u3057\u3066\u4f7f\u7528\u3067\u304d\u308bUpdater\u306f\u6c7a\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306b\u5bfe\u3059\u308bUpdater\u306f\u4e3b\u306b\n",
                "\n",
                "- [SingleSpinFlip](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/updater/single_spin_flip.hpp#L40) (\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30fb\u30d8\u30a4\u30b9\u30c6\u30a3\u30f3\u30b0\u6cd5\u306b\u3088\u308b\u30b9\u30d4\u30f31\u3064\u305a\u3064\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8)\n",
                "- [SwendsenWang](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/updater/swendsen_wang.hpp#L45) (SwendsenWang\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8)\n",
                "\n",
                "\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002  \n",
                "Algorithm\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u307e\u305a**\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8**\u304c\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001\u307e\u305a\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\n",
                "\n",
                "### \u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\n",
                "\n",
                "\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\u306f`(\u30d1\u30e9\u30e1\u30fc\u30bf, \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u6570)`\u306e\u30ea\u30b9\u30c8\u3067\u4e0e\u3048\u3089\u308c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3044\u308c\u308b\u5024\u306fSystem\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306a\u3089\u3070\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e29\u5ea6\u306e\u9006\u6570\u3067\u3042\u308b\u9006\u6e29\u5ea6$\\beta$\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n",
                "\u4f8b\u3048\u3070\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u30ea\u30b9\u30c8\u3068\u3057\u3066"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [],
            "source": [
                "schedule_list = [(0.01, 10),(10, 80),(0.1, 30)]"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3068\u8a2d\u5b9a\u3055\u308c\u305f\u5834\u5408\u3001\u9006\u6e29\u5ea6$\\beta=0.01$\u306710\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3001$\\beta=10$\u306780\u30b9\u30c6\u30c3\u30d7\u3001$\\beta=0.1$\u306730\u30b9\u30c6\u30c3\u30d7\u306e\u8a08120\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n",
                "\n",
                "\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u3001\u9006\u6e29\u5ea6\u306f\u7b49\u6bd4\u7d1a\u6570\u3067\u5897\u52a0\u3055\u305b\u3066\u3044\u304f\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001`utility`\u306b\u3042\u308b`make_classical_schedule_list`\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[((beta: 0.100000) mcs: 20), ((beta: 0.199474) mcs: 20), ((beta: 0.397897) mcs: 20), ((beta: 0.793701) mcs: 20), ((beta: 1.583223) mcs: 20), ((beta: 3.158114) mcs: 20), ((beta: 6.299605) mcs: 20), ((beta: 12.566053) mcs: 20), ((beta: 25.065966) mcs: 20), ((beta: 50.000000) mcs: 20)]\n"
                    ]
                }
            ],
            "source": [
                "import cxxjij.utility as U\n",
                "schedule_list = U.make_classical_schedule_list(0.1, 50, 20, 10)\n",
                "print(schedule_list)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u4e0a\u306e\u4f8b\u3067\u306f$\\beta=0.1$\u304b\u3089$\\beta=50$\u307e\u3067\u3001\u5404\u6e29\u5ea6\u306720\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u8a08\u7b97\u3057\u306a\u304c\u308910\u6bb5\u968e\u3067\u6e29\u5ea6\u3092\u5909\u3048\u3066\u3044\u304f\u305f\u3081\u3001\u8a08200\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u306e\u8a08\u7b97\u3068\u306a\u308a\u307e\u3059\u3002\n",
                "\n",
                "### Algorithm\n",
                "\n",
                "\u7d9a\u3044\u3066\u3001Algorithm\u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002`Algorithm_[Updater]_run`\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3067\u3001\u6307\u5b9a\u3057\u305fUpdater\u3067\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u4f8b\u3067\u306fSingleSpinFlip\u3092\u7528\u3044\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cxxjij.algorithm as A\n",
                "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u4e00\u77ac\u3067\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u9593\u306b\u8a08200\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u306e\u8a08\u7b97\u304c\u7d42\u308f\u3063\u3066\u3044\u307e\u3059\u3002\n",
                "> `A.Algorithm_SingleSpinFlip_run(mysystem, seed, schedule_list)`\u3068\u3059\u308b\u3053\u3068\u3067\u3001seed\u3092\u56fa\u5b9a\u3057\u305f\u307e\u307e\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7d50\u679c\u306b\u518d\u73fe\u6027\u3092\u3082\u305f\u305b\u305f\u3044\u969b\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "callback\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067Algorithm\u306e\u5b9f\u884c\u4e2d\u306b1\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306e\u5834\u5408\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u3068\u30d1\u30e9\u30e1\u30fc\u30bf (\u9006\u6e29\u5ea6)\u3092\u5f15\u6570\u3092\u6301\u3064\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n",
                "\n",
                "\u305f\u3081\u3057\u306b\u30b7\u30b9\u30c6\u30e0\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5024\u3092\u8a18\u9332\u3059\u308bcallback\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [],
            "source": [
                "energies = []\n",
                "\n",
                "def callback_log_energy(system, beta):\n",
                "    #graph\u306f\u4ee5\u524d\u306bGraph\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3066\u5b9a\u7fa9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\n",
                "    energies.append(graph.calc_energy(system.spin))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306ecallback\u3092\u7528\u3044\u3066\u540c\u3058Algorithm\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [],
            "source": [
                "#\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u3082\u3063\u3068\u9577\u304f\u53d6\u308a\u307e\u3059 (\u8a0820000\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7)\n",
                "schedule_list = U.make_classical_schedule_list(0.1, 50, 200, 100)\n",
                "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list, callback_log_energy)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u8a18\u9332\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6a2a\u8ef8\u3092\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b9\u30c6\u30c3\u30d7\u3001\u7e26\u8ef8\u3092\u30a8\u30cd\u30eb\u30ae\u30fc\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "!pip install matplotlib"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "%matplotlib inline\n",
                "import matplotlib.pyplot as plt\n",
                "plt.plot(range(len(energies)), energies)\n",
                "plt.xlabel('Monte Carlo step')\n",
                "plt.ylabel('energy')\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306e\u3088\u3046\u306b\u3001\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u304c\u9032\u3080\u306b\u9023\u308c\u5f90\u3005\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4f4e\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002Algorithm\u306e\u52d5\u4f5c\u4e2d\u306b\u30b7\u30b9\u30c6\u30e0\u306e\u69d8\u5b50\u3092\u77e5\u308a\u305f\u3044\u6642\u306b\u6709\u7528\u3067\u3059\u3002\n",
                "\n",
                "## \u7d50\u679c\u306e\u53d6\u5f97 -Result-\n",
                "\n",
                "`result.get_solution`\u3067\u8a08\u7b97\u7d50\u679c\u3067\u3042\u308b\u30b9\u30d4\u30f3\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u53e4\u5178\u30a4\u30b8\u30f3\u30b0\u6a21\u578b\u306e\u5834\u5408\u306f\u76f4\u63a5`mysystem.spin`\u3092\u53c2\u7167\u3059\u308c\u3070\u30b9\u30d4\u30f3\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001`result.get_solution`\u306f\u305d\u308c\u4ee5\u5916\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u3064\u3044\u3066\u3082\u30b9\u30d4\u30f3\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1]\n"
                    ]
                }
            ],
            "source": [
                "import cxxjij.result as R\n",
                "print(R.get_solution(mysystem))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u3053\u306e\u30b9\u30d4\u30f3\u5217\u304c\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u7b54\u3048\u306a\u306e\u3067\u3001\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u57fa\u5e95\u72b6\u614b (\u306b\u8fd1\u3044\u72b6\u614b)\u3067\u3042\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## C++ core interface\n",
                "\n",
                "C++ core interface\u3067\u3082\u4e0a\u8a18\u3068\u307b\u307c\u540c\u3058\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u304c\u3001\u591a\u5c11\u306e\u9055\u3044\u304c\u3042\u308a\u3001\n",
                "\n",
                "- seed\u5024\u3092\u5165\u308c\u308b\u5f15\u6570\u306b\u306f\u3001\u4e71\u6570\u751f\u6210\u5668 (C++11 random)\u3092\u4ee3\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u307e\u3067\u306e\u30b3\u30fc\u30c9\u306fC++\u3067\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n",
                "- Graph\u30af\u30e9\u30b9\u3067\u3001$J_{ij}, h_i$\u3078\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u304c\u591a\u5c11\u7570\u306a\u308a\u307e\u3059\u3002\n",
                "\n",
                "\u4eca\u307e\u3067\u306e\u5185\u5bb9\u3092C++ core interface\u3067\u8a18\u8ff0\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "```cpp\n",
                "#include <graph/all.hpp>\n",
                "#include <system/all.hpp>\n",
                "#include <updater/all.hpp>\n",
                "#include <algorithm/all.hpp>\n",
                "#include <result/all.hpp>\n",
                "#include <utility/schedule_list.hpp>\n",
                "#include <utility/random.hpp>\n",
                "#include <random>\n",
                "\n",
                "#include <iostream>\n",
                "\n",
                "using namespace openjij;\n",
                "\n",
                "int main(void){\n",
                "\n",
                "    //generate dense graph with size N=100\n",
                "    constexpr std::size_t N = 100;\n",
                "    auto dense = graph::Dense<double>(N);\n",
                "\n",
                "    //generate random engine\n",
                "    auto rand_engine = std::mt19937(0x1234);\n",
                "    //of course you can specify another random generator that is compatible with C++ random generator, say utility::Xorshift,\n",
                "    //auto rand_engine = utility::Xorshift(0x1234);\n",
                "    \n",
                "    //Gaussian distribution\n",
                "    auto gauss = std::normal_distribution<>{0, 1};\n",
                "\n",
                "    //set interactions\n",
                "    for(std::size_t i=0; i<N; i++){\n",
                "        for(std::size_t j=0; j<N; j++){\n",
                "            dense.J(i, j) = (i == j) ? 0 : gauss(rand_engine)/N;\n",
                "        }\n",
                "    }\n",
                "\n",
                "    //set local fields\n",
                "    for(std::size_t i=0; i<N; i++){\n",
                "        dense.h(i) = gauss(rand_engine);\n",
                "    }\n",
                "\n",
                "    //create classical Ising system\n",
                "    auto system = system::make_classical_ising(dense.gen_spin(rand_engine), dense);\n",
                "\n",
                "    //generate schedule list\n",
                "    //from beta=0.1 to beta=50, 20 Monte Carlo step for each tempearature, 10 samples\n",
                "    auto schedule_list = utility::make_classical_schedule_list(0.1, 50, 20, 10);\n",
                "\n",
                "    //or in the case of classical system, you can specify arbitrary schedules by using a std::vector of utility::Schedule<system::classical_system>\n",
                "    //std::vector<utility::Schedule<system::classical_system>> schedule_list;\n",
                "    //utility::Schedule<system::classical_system> schedule;\n",
                "    //schedule.updater_parameter = {0.01};\n",
                "    //schedule.one_mc_step = 10; //number of Monte Carlo step per temperature\n",
                "    //schedule_list.push_back(schedule);\n",
                "    //\n",
                "    //schedule.updater_parameter = {10};\n",
                "    //schedule.one_mc_step = 80; //number of Monte Carlo step per temperature\n",
                "    //schedule_list.push_back(schedule);\n",
                "    //\n",
                "    //schedule.updater_parameter = {0.1};\n",
                "    //schedule.one_mc_step = 30; //number of Monte Carlo step per temperature\n",
                "    //schedule_list.push_back(schedule); //schedule_list -> [(0.01, 10), (10, 80), (0.1, 30)]\n",
                "\n",
                "\n",
                "    //do annealing (updater: SingleSpinFlip)\n",
                "    algorithm::Algorithm<updater::SingleSpinFlip>::run(system, rand_engine, schedule_list);\n",
                "\n",
                "    //show spins\n",
                "    std::cout << \"The result spins are [\";\n",
                "    for(auto&& elem : result::get_solution(system)){\n",
                "        std::cout << elem << \" \";\n",
                "    }\n",
                "\n",
                "    std::cout << \"]\" << std::endl;\n",
                "}\n",
                "\n",
                "```"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.2"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}