{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9-Solving Graph Coloring Problem with PyQUBO\n",
    "この節では、[Ising formulations of many NP problems](https://arxiv.org/pdf/1302.5843v3.pdf) から6.1. Graph ColoringをPyQUBOを用いて解きます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/source/ja/009-GraphColorPyqubo.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### グラフ彩色問題\n",
    "グラフ彩色問題は以下のような状況の最適解を求める問題であり、NP完全問題の一つです。まずは具体的な問から考えてみましょう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 具体例\n",
    "分かりやすくするために具体的に以下のような問を考えます。\n",
    "> 10個のノードと20本の枝を持つ無効グラフが与えられたとします。枝で繋がれたノード同士は異なる色となるようにノードを色分けする時、3色で全てのノードを塗ることは可能であるか考えます。\n",
    "> グラフは下のようになっているとします。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <img src=\"images/graph_color.png\">\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 塗り分けた後のグラフは下のようになります。\n",
    "> このグラフから全てのノードは3色で塗り分けることができると分かります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <img src=\"images/graph_color_res.png\">\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 問題の一般化\n",
    "無効グラフ$G=(V,E)$が与えられるとします。辺で結ばれたノードの色が重複しないように全てのノードを$n$色で塗り分けることができるか考えます。\n",
    "\n",
    "全てのノードが$v$をindexとして持つとします。\n",
    "\n",
    "\n",
    "ノードの色分けはバイナリ変数$x$で表すことにしましょう。$x_{v,i}$はノード$v$が色$i$で塗られている時に1,その他の状態では0をとります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QUBO行列への変換\n",
    "ハミルトニアンは以下のように定めることができます。\n",
    "\n",
    "$$H = A\\sum_{v=1}^V\\left(1-\\sum_{i=1}^n x_{v,i}\\right)^2\n",
    "+ A\\sum_{(uv)\\in E}\\sum_{i=1}^nx_{u,i}x_{v,i}$$\n",
    "\n",
    "第一項はそれぞれのノードは必ず一色に塗られるという制約です。第二項は辺で繋がれたノードの色は異なるという制約です。これらが破られる度に$H$は増加します。\n",
    "\n",
    "$H=0$となる状態が見つかった時、グラフ$G$は$n$色で塗ることが可能だと分かります。\n",
    "\n",
    "また、$x_{v,i}$でどのiの時$x_{v,i}=1$となるか調べることでノード$v$の色を調べることができます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PyQUBOへの実装\n",
    "### QUBO行列の生成\n",
    "上記の例で示したグラフの彩色問題を実際にQUBO行列にしてPyQUBOを用いて解いてみます。\n",
    "まず、グラフの頂点数、塗り分けるのに使う色の数、辺を定義します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#頂点数\n",
    "N_VER = 10\n",
    "#色の数\n",
    "N_COLOR = 4\n",
    "#辺の数\n",
    "N_EDGE = 20\n",
    "#辺のリスト\n",
    "graph = [(7, 5), (1, 6), (9, 0), (8, 9), (1, 2), (0, 6), (3, 4), (8, 2), (7, 1), (1, 5), (7, 0), (2, 4), (9, 3), (2, 0), (0, 1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "次にバイナリ変数xを定義します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PYQUBOをimportします\n",
    "from pyqubo import Array\n",
    "#QUBOを表現する変数(頂点数×色の数)\n",
    "x = Array.create('x', shape=(N_VER,N_COLOR), vartype='BINARY')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "この変数を用いてハミルトニアンを定義します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyqubo import Constraint\n",
    "# ハミルトニアンの第一項 (各頂点に1色だけ塗る)\n",
    "H_A = Constraint(sum((1-sum(x[v,i] for i in range(1,N_COLOR)))**2 for v in range(N_VER)), label='HA')\n",
    "# ハミルトニアンの第二項 (辺で結ばれた頂点が同じ色で塗られていないか)\n",
    "H_B = sum(sum(x[u,i] * x[v,i] for i in range (1,N_COLOR)) for u,v in graph)\n",
    "# ハミルトニアン全体を定義します\n",
    "Q = H_A+H_B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 実行結果\n",
    "\n",
    "ハミルトニアンをコンパイルしてto_qubo()でQUBOに変換します。\n",
    "quboにはPythonの辞書型で格納されたQUBOが、そしてoffsetにはQUBO化した際に現れる定数(無視してよい)が代入されます。\n",
    "\n",
    "では、これをSimulated Annealingのソルバーで解いて結果を見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already up-to-date: networkx in /home/jiko/.local/lib/python3.8/site-packages (2.5)\n",
      "Requirement already satisfied, skipping upgrade: decorator>=4.3.0 in /home/jiko/.local/lib/python3.8/site-packages (from networkx) (4.4.2)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade networkx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Result]\n",
      "\n",
      "{0: {1: 0, 2: 0, 3: 1}, 1: {1: 1, 2: 0, 3: 0}, 2: {1: 0, 2: 1, 3: 0}, 3: {1: 0, 2: 1, 3: 0}, 4: {1: 1, 2: 0, 3: 0}, 5: {1: 0, 2: 0, 3: 1}, 6: {1: 0, 2: 1, 3: 0}, 7: {1: 0, 2: 1, 3: 0}, 8: {1: 0, 2: 0, 3: 1}, 9: {1: 1, 2: 0, 3: 0}}\n",
      "\n",
      "broken\n",
      "{}\n",
      "\n",
      "['yellowgreen', 'plum', 'skyblue', 'skyblue', 'plum', 'yellowgreen', 'skyblue', 'skyblue', 'yellowgreen', 'plum']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = Q.compile()\n",
    "qubo, offset = model.to_qubo()\n",
    "from pyqubo import solve_qubo\n",
    "\n",
    "# PyQUBOに備わっているSAを使います\n",
    "raw_solution = solve_qubo(qubo)\n",
    "decoded_solution, broken, energy = model.decode_solution(raw_solution, vartype=\"BINARY\")\n",
    "\n",
    "#結果の表示\n",
    "print(\"[Result]\")\n",
    "print()\n",
    "print(decoded_solution['x'])\n",
    "print()\n",
    "\n",
    "#制約を守れているか見ます\n",
    "print(\"broken\")\n",
    "print(broken)\n",
    "print()\n",
    "\n",
    "#グラフを表示します\n",
    "import networkx as nx\n",
    "\n",
    "G = nx.Graph()\n",
    "G.add_nodes_from([str(i) for i in range(1,11)])\n",
    "graph2 =[(str(a+1),str(b+1)) for a,b in graph]\n",
    "G.add_edges_from(graph2)\n",
    "cl=[\"plum\",\"skyblue\",\"yellowgreen\"]\n",
    "colors = []\n",
    "for i in range(0,N_VER):\n",
    "    for j in range(1,N_COLOR):\n",
    "        if decoded_solution['x'][i][j]==1:\n",
    "            colors.append(cl[j-1])\n",
    "print(colors)\n",
    "nx.draw(G, with_labels=True, font_weight='bold',node_color = colors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OpenJijに投げる\n",
    "次にOpenJijのSAで解いてみましょう"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: {1: 1, 2: 0, 3: 0},\n",
       " 1: {1: 0, 2: 0, 3: 1},\n",
       " 2: {1: 0, 2: 1, 3: 0},\n",
       " 3: {1: 1, 2: 0, 3: 0},\n",
       " 4: {1: 0, 2: 0, 3: 1},\n",
       " 5: {1: 1, 2: 0, 3: 0},\n",
       " 6: {1: 0, 2: 1, 3: 0},\n",
       " 7: {1: 0, 2: 1, 3: 0},\n",
       " 8: {1: 0, 2: 0, 3: 1},\n",
       " 9: {1: 0, 2: 1, 3: 0}}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# OpenJijのインポートをします\n",
    "import openjij as oj\n",
    "# SQAを使います。\n",
    "sampler = oj.SASampler()\n",
    "# PYQUBOで使ったquboを使います。\n",
    "response = sampler.sample_qubo(Q=qubo)\n",
    "# エネルギーが一番低い状態を取り出します。\n",
    "dict_solution = response.first.sample\n",
    "# デコードします。\n",
    "decoded_solution, broken, energy = model.decode_solution(dict_solution, vartype=\"BINARY\")\n",
    "# 辞書型をsortして見やすくする処理を追加します。\n",
    "x_solution = dict(sorted(decoded_solution['x'].items()))\n",
    "{key:dict(sorted(value.items())) for key, value in x_solution.items()}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "グラフがどのように色が塗られるか見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "broken\n",
      "{}\n",
      "\n",
      "['plum', 'yellowgreen', 'skyblue', 'plum', 'yellowgreen', 'plum', 'skyblue', 'skyblue', 'yellowgreen', 'skyblue']\n"
     ]
    },
    {
     "data": {
      "image/png": "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qVN07dqV3bt307hx4wc6l8ViYcOGDRiNRn788UceffRRDAYDffv2LVp24exGjRrFuHHjGD9+vNqlCCFKSYKvFAoKCtizZ0/RiO7nn3+mTp06t43o6tWrp3aZNvP++++zdu1a1q5da7PwTktLY9GiRRiNRrKzs4mMjGTy5MlO/+c2d+5ckpOT+eSTT9QuRQhRShJ8JcjOzmbHjh1FI7q9e/fSokWLopDr2bMn1apVU7tMuzGbzXTp0oXZs2czefJkm55bURT27duH0WgkLi6Orl27YjAYGDFiRLk+87SVXbt2MXPmTBITE9UuRQhRShJ83ByNbNu2rWhEd+TIEUJCQopGdN27d8ff31/tMsvVL7/8wpAhQzh48CA1atSwyzVyc3OJj48nOjqaw4cPM3HiRAwGA61bt7bL9eyhsLCQKlWqcOHCBQICAtQuRwhRCnYPvmyTlQs5JvItCjoN+Oi11PN1Q69V7/nXhQsXikJu69atnD17lu7duxc9o+vSpUuFmI5/Ly+//DLnzp1j8eLFdr/Wr7/+yrx585g/fz5169bFYDAQHh7uFB84+vbty6uvvsqgQYPULkUIUQp2CT5FUUjJNrMrNZczN0zoNL+vHNP89v9DAj3pUM2TAHf7znS81cz5jzMubzVzvjWia9++fZmn71cEubm5tG3blg8//JBhw4aVyzXNZjM//vgjRqORjRs3MnLkSAwGAz179nTYyUKvvfYaGo2Gt99+W+1ShBClYPPgK7QoLDudxaVcE6Y774WKTnMzBHvX8qZLDdt1/79bM+dbI7o/NnMWd7dx40amTJnC4cOH8fPzK9drX7lypWhCjMViITIykscff7zMrdvsbc2aNbz//vts3LhR7VKEEKVg0+ArtCgsPJHB9QILllKe1U0Lnap50af2/XUtuVcz5169etGoUSOHHS04A4PBgLe3Nx9//LEq11cUhZ07d2I0GomPj6dXr14YDAaGDh2Km1vJu8eXp4yMDOrVq0d6erpD1COEuDubBl/sr5mkZJtKHXq36DUwqJ4vbare+7maPZo5i7tLT08nODiYZcuW8dBDD6laS3Z2NkuWLCE6OppTp07x+OOPExkZSfPmzVWtq127dnz99dd06dJF1TqEEPdms+C7lGvi2xOZmP9wttN7t/P1jJElHj/mH/+l44jfF/166zU8E1yl2MjsVjPnW8/o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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"broken\")\n",
    "print(broken)\n",
    "print()\n",
    "cl=[\"plum\",\"skyblue\",\"yellowgreen\"]\n",
    "colors = []\n",
    "for i in range(0,N_VER):\n",
    "    for j in range(1,N_COLOR):\n",
    "        if decoded_solution['x'][i][j]==1:\n",
    "            colors.append(cl[j-1])\n",
    "print(colors)\n",
    "nx.draw(G, with_labels=True, font_weight='bold',node_color = colors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "結果を見ると制約を満たしつつ全てのノードを3色で塗り分けられていると分かります。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
