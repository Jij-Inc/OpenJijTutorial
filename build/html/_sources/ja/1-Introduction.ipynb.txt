{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "Y4hVgt6yQyOa"
            },
            "source": [
                "# 1-OpenJij \u5165\u9580"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "view-in-github"
            },
            "source": [
                "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/1-Introduction.ipynb)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "OpenJij\u306f Ising\u30e2\u30c7\u30eb, QUBO\u306e\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30c3\u30af\u6700\u9069\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002  \n",
                "\u6700\u9069\u5316\u306e\u30b3\u30a2\u90e8\u5206\u306fC++\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Python\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5099\u3048\u3066\u3044\u308b\u305f\u3081\u3001Python\u3067\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306fpip\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001numpy \u3092\u4e8b\u524d\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 30,
            "metadata": {
                "colab": {},
                "colab_type": "code",
                "id": "JZW9IAE9QyOd"
            },
            "outputs": [],
            "source": [
                "# !pip install openjij"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 51,
            "metadata": {
                "colab": {},
                "colab_type": "code",
                "id": "wyu_ZSisQyOg",
                "outputId": "09252d51-5c0a-43c7-af4f-95edea5170af"
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Name: openjij\r\n",
                        "Version: 0.0.11\r\n",
                        "Summary: Framework for the Ising model and QUBO\r\n",
                        "Home-page: https://openjij.github.io/OpenJij/\r\n",
                        "Author: Jij Inc.\r\n",
                        "Author-email: openjij@j-ij.com\r\n",
                        "License: Apache License 2.0\r\n",
                        "Location: /Users/shonakamura/.pyenv/versions/3.6.9/lib/python3.6/site-packages\r\n",
                        "Requires: numpy, dimod, requests\r\n",
                        "Required-by: \r\n"
                    ]
                }
            ],
            "source": [
                "# \u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067OpenJij\u306e\u60c5\u5831\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5b9f\u884c\u74b0\u5883\u306b\u3088\u3063\u3066\u51fa\u529b\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n",
                "!pip show openjij"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "x9a_Imk1QyOn"
            },
            "source": [
                "### Ising model\n",
                "\n",
                "Ising model \u306f\u7d71\u8a08\u7269\u7406\u5b66\u3067\u6271\u308f\u308c\u308b\u30e2\u30c7\u30eb\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u307e\u3059\u3002\n",
                "\n",
                "$$H(\\{\\sigma_i\\}) = \\sum_{i > j} J_{ij}\\sigma_i \\sigma_j + \\sum_{i=1}^N h_i \\sigma_i$$\n",
                "$$\\sigma_i \\in \\{-1, 1\\}, i=1,\\cdots N$$\n",
                "\n",
                "\u3053\u3053\u3067$H(\\{\\sigma_i\\})$\u306f\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u30a8\u30cd\u30eb\u30ae\u30fc\u3084\u30b3\u30b9\u30c8\u95a2\u6570\u3060\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002  \n",
                "$\\sigma_i$\u306f2\u5024$(1, -1)$\u3092\u53d6\u308b\u5909\u6570\u3067\u3059\u3002  \n",
                "\n",
                "> $\\sigma_i$\u306f\u7269\u7406\u3067\u306f\u30b9\u30d4\u30f3\u3068\u3044\u3046\u7269\u7406\u91cf\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001\u30b9\u30d4\u30f3\u5909\u6570\u3082\u3057\u304f\u306f\u5358\u7d14\u306b\u30b9\u30d4\u30f3\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002  \n",
                "> \u30b9\u30d4\u30f3\u3068\u306f\u5c0f\u3055\u306a\u78c1\u77f3\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002-1 \u304c\u78c1\u77f3\u304c\u4e0a\u5411\u304d\u30011\u304c\u4e0b\u5411\u304d\u306e\u3088\u3046\u306b\u5909\u6570\u306e\u5024\u3068\u7269\u7406(\u78c1\u77f3\u306e\u5411\u304d)\u304c\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n",
                "\n",
                "\n",
                "$H$\u306f\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b$\\{\\sigma_i\\} = \\{\\sigma_1, \\sigma_2, \\cdots, \\sigma_N\\}$\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002  \n",
                "$J_{ij}, h_i$\u304c\u4e0e\u3048\u3089\u308c\u308b\u554f\u984c\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u76f8\u4e92\u4f5c\u7528\u4fc2\u6570\u3001\u7e26\u78c1\u5834\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n",
                "\n",
                "OpenJij\u306f$J_{ij} \u3068 h_i$\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b$H(\\{\\sigma_i\\})$\u3092\u6700\u5c0f\u5316\u3059\u308b\u30b9\u30d4\u30f3\u5909\u6570\u306e\u7d44\u307f$\\{\\sigma_i\\}$\u3092\u63a2\u3057\u3066\u304f\u308c\u308b\u6570\u5024\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n",
                "\n",
                "\u5177\u4f53\u7684\u306a\u4f8b\u3092\u4e00\u3064\u898b\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "j0iZqoWtQyOn"
            },
            "source": [
                "## OpenJij\u306b\u554f\u984c\u3092\u6295\u3052\u3066\u307f\u308b\n",
                "\n",
                "\u5909\u6570\u306e\u6570\u304c$N=5$\u3067\u7e26\u78c1\u5834\u3068\u76f8\u4e92\u4f5c\u7528\u304c\n",
                "\n",
                "$$h_i = -1~\\text{for} ~\\forall i, ~ J_{ij} = -1~\\text{for} ~\\forall i, j$$\n",
                "\n",
                "\u306e\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5168\u3066\u306e\u76f8\u4e92\u4f5c\u7528\u304c\u30de\u30a4\u30ca\u30b9\u306a\u306e\u3067\u3001\u5404\u30b9\u30d4\u30f3\u5909\u6570\u306f\u540c\u3058\u5024\u3092\u3068\u3063\u305f\u65b9\u304c\u30a8\u30cd\u30eb\u30ae\u30fc\u306f\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u307e\u305f\u7e26\u78c1\u5834\u306f\u5168\u3066\u30de\u30a4\u30ca\u30b9\u306a\u306e\u3067\u3001\u5404\u30b9\u30d4\u30f3\u306f1\u306e\u5024\u3092\u3068\u3063\u305f\u65b9\u304c\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4f4e\u304f\u306a\u308a\u307e\u3059\u3002  \n",
                "\u3088\u3063\u3066\u3053\u306e\u7b54\u3048\u306f $\\{\\sigma_i\\} = \\{1, 1, 1, 1, 1\\}$\u306b\u306a\u308a\u307e\u3059\u3002\n",
                "\n",
                "\u3067\u306f\u3053\u308c\u3092\u518d\u73fe\u3059\u308b\u3053\u3068\u3092OpenJij\u3092\u7528\u3044\u3066\u8a08\u7b97\u3057\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "h_i:  {0: -1, 1: -1, 2: -1, 3: -1, 4: -1}\n",
                        "Jij:  {(0, 1): -1, (0, 2): -1, (0, 3): -1, (0, 4): -1, (1, 2): -1, (1, 3): -1, (1, 4): -1, (2, 3): -1, (2, 4): -1, (3, 4): -1}\n"
                    ]
                }
            ],
            "source": [
                "import openjij as oj\n",
                "\n",
                "# \u554f\u984c\u3092\u8868\u3059\u7e26\u78c1\u5834\u3068\u76f8\u4e92\u4f5c\u7528\u3092\u4f5c\u308a\u307e\u3059\u3002OpenJij\u3067\u306f\u8f9e\u66f8\u578b\u3067\u554f\u984c\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3059\u3002\n",
                "N = 5\n",
                "h = {i: -1 for i in range(N)}\n",
                "J = {(i, j): -1 for i in range(N) for j in range(i+1, N)}\n",
                "\n",
                "print('h_i: ', h)\n",
                "print('Jij: ', J)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[1 1 1 1 1]]\n",
                        "[{0: 1, 1: 1, 2: 1, 3: 1, 4: 1}]\n"
                    ]
                }
            ],
            "source": [
                "# \u307e\u305a\u554f\u984c\u3092\u89e3\u3044\u3066\u304f\u308c\u308bSampler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n",
                "# \u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u9078\u629e\u3067\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\n",
                "sampler = oj.SASampler(num_reads=1)\n",
                "# sampler\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u554f\u984c(h, J)\u3092\u6295\u3052\u3066\u554f\u984c\u3092\u89e3\u304d\u307e\u3059\u3002\n",
                "response = sampler.sample_ising(h, J)\n",
                "\n",
                "# \u8a08\u7b97\u3057\u305f\u7d50\u679c(\u72b6\u614b)\u306f response.states \u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n",
                "print(response.states)\n",
                "\n",
                "# \u3082\u3057\u304f\u306f\u6dfb\u5b57\u4ed8\u304d\u3067\u307f\u308b\u306b\u306f samples\u95a2\u6570 \u3092\u7528\u3044\u307e\u3059\u3002\n",
                "print([s for s in response.samples()])"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "feViwN6zQyO0"
            },
            "source": [
                "## OpenJij\u306e\u89e3\u8aac\n",
                "\n",
                "\u4e0a\u8ff0\u306e\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002  \n",
                "OpenJij\u306f\u73fe\u5728\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30922\u3064\u5099\u3048\u3066\u304a\u308a\u3001\u4e0a\u8a18\u3067\u4f7f\u3063\u305f\u3082\u306e\u306fD-Wave Ocean\u3068\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001OpenJij\u3067\u6163\u308c\u3066\u304a\u3051\u3070D-Wave Ocean\u3078\u306e\u5909\u66f4\u304c\u30b9\u30e0\u30fc\u30ba\u3067\u3059\u3002\n",
                "\n",
                "> \u3082\u3046\u4e00\u3064\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3067\u306f\u89e3\u8aac\u3057\u307e\u305b\u3093\u304c\u3001OpenJij\u306e\u4ed5\u7d44\u307f`graph, method, algorithm`\u3092\u76f4\u63a5\u4f7f\u3046\u3053\u3068\u3067\u62e1\u5f35\u306e\u3057\u3084\u3059\u3055\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u4e0a\u306e\u30bb\u30eb\u3067\u6271\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n",
                "\n",
                "### Sampler\n",
                "\n",
                "\u5148\u307b\u3069\u306f\u554f\u984c\u3092\u8f9e\u66f8\u578b\u3067\u4f5c\u3063\u305f\u3042\u3068\u306b\u3001Sampler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n",
                "```python\n",
                "sampler = oj.SASampler(num_reads=1)\n",
                "```\n",
                "\u3053\u3053\u3067\u3053\u306eSampler\u3068\u3044\u3046\u306e\u304c\u3069\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30de\u30b7\u30f3\u3092\u4f7f\u3046\u304b\u3092\u9078\u629e\u3057\u3066\u3044\u307e\u3059\u3002\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a66\u3057\u305f\u3044\u6642\u306f\u3053\u306eSampler\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u307e\u305f`num_reads`\u5f15\u6570\u306b\u6574\u6570\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u3001\u4e00\u5ea6\u306b\u89e3\u304f\u56de\u6570(iteration\u56de\u6570)\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u8a73\u7d30\u306f\u5f8c\u8ff0)\u3002\n",
                "\n",
                "> OpenJij\u3067\u6271\u3063\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u306a\u78ba\u7387\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u554f\u984c\u3092\u89e3\u304f\u305f\u3073\u306b\u8fd4\u3059\u89e3\u304c\u9055\u3063\u305f\u308a\u3001\u5fc5\u305a\u3057\u3082\u6700\u9069\u89e3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n",
                "> \u3088\u3063\u3066\u8907\u6570\u56de\u554f\u984c\u3092\u89e3\u304d\u3001\u305d\u306e\u4e2d\u3067\u3088\u3044\u89e3\u3092\u63a2\u3059\u3068\u3044\u3046\u624b\u6cd5\u3092\u3068\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u89e3\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3068\u3044\u3046\u6c17\u6301\u3061\u3092\u8fbc\u3081\u3066Sampler\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n",
                "\n",
                "> num_reads\u306e\u5024\u3092\u660e\u8a18\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306enum_reads=1\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n",
                "\n",
                "\u4e0a\u306e\u30bb\u30eb\u3067\u7528\u3044\u305f`SASampler`\u306f`Simulated Annealing`\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u3001\u89e3\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308bSampler\u3067\u3059\u3002  \n",
                "\u4ed6\u306b\u3082\n",
                "\n",
                "- SQASampler : Simulated Quantum Annealing(SQA) \u3068\u3044\u3046\u91cf\u5b50\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0\u3092\u53e4\u5178\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n",
                "- GPUSQASampler : SQA\u3092GPU\u3067\u5b9f\u884c\u3059\u308bSampler\u3067\u3059\u3002Chimera\u30b0\u30e9\u30d5\u3068\u3044\u3046\u7279\u6b8a\u306a\u69cb\u9020\u306e\u307f\u304c\u73fe\u72b6\u6271\u3048\u308b\n",
                "\n",
                "\u306eSampler\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "### sample_ising(h, J)\n",
                "\u4e0a\u8ff0\u306e\u3068\u304a\u308a\u3001\u554f\u984c\u3092\u89e3\u304f\u969b\u306f`.sample_ising(h, J)`\u306e\u3088\u3046\u306b\u7e26\u78c1\u5834\u3068\u76f8\u4e92\u4f5c\u7528\u3092\u5909\u6570\u3068\u3057\u3066\u4ee3\u5165\u3057\u3066\u6295\u5165\u3057\u307e\u3059\u3002\n",
                "\n",
                "\u5f8c\u8ff0\u3057\u307e\u3059\u305f\u3001Ising\u30e2\u30c7\u30eb\u3068\u7b49\u4fa1\u306aQUBO\u306e\u6700\u9069\u5316\u3092\u884c\u3046\u6642\u306f`.sample_qubo(Q)`\u3092\u7528\u3044\u307e\u3059\u3002\n",
                "\n",
                "### Response\n",
                "\n",
                "`.sample_ising(h, J)`\u306fResponse\u30af\u30e9\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002Response\u30af\u30e9\u30b9\u306b\u306fSampler\u304c\u89e3\u3044\u3066\u51fa\u3066\u304d\u305f\u89e3\u3068\u5404\u89e3\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "- .states :\n",
                "    - type : list(list(int))\n",
                "    - num_reads\u56de\u6570\u306e\u89e3\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n",
                "    > \u7269\u7406\u3067\u306f\u30b9\u30d4\u30f3\u306e\u914d\u5217(\u89e3)\u3092\u72b6\u614b\u3068\u547c\u3076\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002.states\u306b\u306fnum_reads\u56de\u3060\u3051\u89e3\u3044\u305f\u89e3\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8907\u6570\u306e\u72b6\u614b\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u6c17\u6301\u3061\u3092\u8fbc\u3081\u3066 .states \u3068\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "- .energies:\n",
                "    - type : list(float)\n",
                "    - num_reads\u56de\u6570\u5206\u306e\u5404\u89e3\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n",
                "- .indices:\n",
                "    - type: list(object)\n",
                "    - \u89e3\u304clist\u3067states\u306b\u5165\u3063\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u5404\u30b9\u30d4\u30f3\u306e\u6dfb\u5b57\u3092\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n",
                "- .first.sample:\n",
                "    - type: dict\n",
                "    - \u6700\u5c0f\u30a8\u30cd\u30eb\u30ae\u30fc\u72b6\u614b\u3092\u53d6\u308b\u3068\u304d\u306e\u72b6\u614b\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n",
                "- .first.energy:\n",
                "    - type: float\n",
                "    - \u6700\u5c0f\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5024\n",
                "\n",
                "> Response\u30af\u30e9\u30b9\u306fD-Wave\u306edimod\u306eSampleSet\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\u3088\u308a\u8a73\u7d30\u306a\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002  \n",
                "> [dimod\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001SampleSet](https://docs.ocean.dwavesys.com/projects/dimod/en/latest/reference/sampleset.html)\n",
                "\n",
                "\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u53c2\u7167\u3067\u304d\u307e\u3059\u3002\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "{'a': 1, 'b': 1, 'c': -1}\n",
                        "-4.0\n"
                    ]
                }
            ],
            "source": [
                "# \u5b9f\u306f h, J \u306e\u6dfb\u5b57\u3092\u793a\u3059\u3001\u8f9e\u66f8\u306ekey\u306f\u6570\u5024\u4ee5\u5916\u3082\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "h = {'a': -1, 'b': -1}\n",
                "J = {('a', 'b'): -1, ('b', 'c'): 1}\n",
                "# num_reads \u5f15\u6570\u306b\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3067\u3001SA\u309210\u56de\u8a66\u884c\u3059\u308b\u8a08\u7b97\u3092\u4e00\u5ea6\u306e\u547d\u4ee4\u3067\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "sampler = oj.SASampler(num_reads=10)  \n",
                "response = sampler.sample_ising(h, J)\n",
                "print(response.first.sample)\n",
                "print(response.first.energy)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 40,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]\n",
                        " [ 1  1 -1]]\n"
                    ]
                }
            ],
            "source": [
                "# response.states \u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u300210\u56de\u5206\u306e\u89e3\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n",
                "print(response.states)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "4mekWlvTQyO4"
            },
            "source": [
                "> num_reads \u306a\u3069\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`.sample_ising`\u306a\u3069\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "> ```\n",
                "> response = sampler.sample_ising(h, J, num_reads=2)\n",
                "> response.states\n",
                "> > [[1, 1, -1],[1, 1, -1]]\n",
                "> ```\n",
                "\n",
                "\u4eca\u56de\u306f\u554f\u984c\u304c\u7c21\u5358\u306a\u306e\u3067\u300110\u56de\u3068\u3082\u540c\u3058\u7b54\u3048 [1,1,-1] \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 41,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "array([-4., -4., -4., -4., -4., -4., -4., -4., -4., -4.])"
                        ]
                    },
                    "execution_count": 41,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "# \u6b21\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n",
                "response.energies"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "NYAnma_WQyO7"
            },
            "source": [
                "\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5024\u309210\u56de\u3068\u3082\u540c\u3058\u5024\u3092\u53d6\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002  \n",
                "`response.states`\u306b\u5165\u3063\u3066\u3044\u308b\u89e3\u306f\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u554f\u984c\u3092\u30bb\u30c3\u30c8\u3057\u305f\u6642\u306e `a, b, c`\u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u306e\u5bfe\u5fdc\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u305d\u308c\u3092\u8abf\u3079\u308b\u305f\u3081\u306b`response.indices`\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 42,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "['a', 'b', 'c']"
                        ]
                    },
                    "execution_count": 42,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "response.indices"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "5rf7wB7LQyPJ"
            },
            "source": [
                "\u6700\u5c0f\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u5024\u3092\u6301\u3063\u305f\u72b6\u614b\u306e\u307f\u304c\u77e5\u308a\u305f\u3044\u5834\u5408\u306b\u306f `.first` \u304c\u4fbf\u5229\u3067\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 43,
            "metadata": {
                "colab": {},
                "colab_type": "code",
                "id": "-J1utQATQyPK",
                "outputId": "839e1260-3b1c-432d-a4b6-7b318ba1048c"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "Sample(sample={'a': 1, 'b': 1, 'c': -1}, energy=-4.0, num_occurrences=1)"
                        ]
                    },
                    "execution_count": 43,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "response.first"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "zxyro6tTQyPN"
            },
            "source": [
                "## QUBO\u3092\u89e3\u3044\u3066\u307f\u308b\n",
                "\n",
                "\u793e\u4f1a\u306e\u5b9f\u554f\u984c\u3092\u89e3\u304d\u305f\u3044\u5834\u5408\u306b\u306f\u3001Ising model\u3088\u308a\u3082 QUBO(Quadratic unconstraited binary optimization)\u3068\u3057\u3066\u5b9a\u5f0f\u5316\u3057\u305f\u65b9\u304c\u7d20\u76f4\u306a\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8ff0\u306eIsing model\u3092\u4f7f\u3063\u3066\u89e3\u3044\u305f\u5834\u5408\u3068\u540c\u3058\u3067\u3059\u3002\n",
                "\n",
                "QUBO\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u307e\u3059\u3002\n",
                "\n",
                "$$H(\\{q_i\\}) = \\sum_{i\\geq j} Q_{ij}q_i q_j$$\n",
                "$$q_i \\in \\{0, 1\\}$$\n",
                "\n",
                "Ising model\u3068\u306e\u9055\u3044\u306f\u30012\u5024\u5909\u6570\u304c0 \u3068 1\u306e\u30d0\u30a4\u30ca\u30ea\u5909\u6570\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002$\\sum, Q_{ij}$\u306e\u53d6\u308a\u65b9\u306b\u306f\u4ed6\u306b\u3082\u3084\u308a\u65b9(\u4f8b\u3048\u3070$Q_{ij}$\u3092\u5bfe\u79f0\u884c\u5217\u306b\u3059\u308b\u306a\u3069)\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u4e0a\u5f0f\u306e\u3088\u3046\u306b\u5b9a\u5f0f\u5316\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n",
                "\n",
                "> Ising \u30e2\u30c7\u30eb \u3068 QUBO \u306f\u76f8\u4e92\u5909\u63db\u304c\u53ef\u80fd\u3068\u3044\u3046\u610f\u5473\u3067\u7b49\u4fa1\u3067\u3059\u3002\n",
                "> $q_i = (\\sigma_i + 1)/2$\u3068\u3044\u3046\u5909\u63db\u5f0f\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u5909\u63db\u304c\u53ef\u80fd\u3067\u3059\u3002\n",
                "\n",
                "QUBO\u3067\u306f$Q_{ij}$\u304c\u4e0e\u3048\u308b\u554f\u984c\u3067\u3001$H(\\{q_i\\})$\u3092\u6700\u5c0f\u5316\u3059\u308b0, 1\u306e\u7d44\u307f\u5408\u308f\u305b$\\{q_i\\}$\u3092\u63a2\u3057\u307e\u3057\u3087\u3046\u3068\u3044\u3046\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\u307b\u307cIsing model\u3068\u4e00\u7dd2\u3067\u3059\u3002\n",
                "\n",
                "\u307e\u305f$q_i$\u306f\u30d0\u30a4\u30ca\u30ea\u5909\u6570\u306a\u306e\u3067\u3001$q_i^2 = q_i$\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3088\u3063\u3066\u4e0a\u5f0f\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n",
                "\n",
                "$$H(\\{q_i\\}) = \\sum_{i > j} Q_{ij}q_i q_j + \\sum_i Q_{ii} q_i$$\n",
                "\n",
                "$Q_{ij}$\u306e\u6dfb\u5b57\u304c\u540c\u3058\u3068\u3053\u308d\u306f $q_i$\u306e1\u6b21\u306e\u9805\u306e\u4fc2\u6570\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n",
                "\n",
                "\u3053\u308c\u3092OpenJij\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 44,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[1 1 0]]\n"
                    ]
                }
            ],
            "source": [
                "# Q_ij \u3092\u8f9e\u66f8\u578b\u3067\u3064\u304f\u308a\u307e\u3059\u3002\n",
                "Q = {(0, 0): -1, (0, 1): -1, (1, 2): 1, (2, 2): 1}\n",
                "sampler = oj.SASampler()\n",
                "# QUBO\u3092\u89e3\u304f\u6642\u306f .sample_qubo \u3092\u4f7f\u3044\u307e\u3059\u3002\n",
                "response = sampler.sample_qubo(Q)\n",
                "print(response.states)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "CxbDNkSuQyPU"
            },
            "source": [
                "QUBO\u3067\u306f\u5909\u6570\u304c 0, 1\u306e\u305f\u3081\u3001\u89e3\u3082 0, 1\u3067\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002  \n",
                "\u3053\u306e\u3088\u3046\u306bOpenJij \u3092\u7528\u3044\u3066 Ising model\u3068QUBO\u306e\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "8IRw4pHOQyPV"
            },
            "source": [
                "## \u5c11\u3057\u96e3\u3057\u3044\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u308b\n",
                "\n",
                "\u3053\u308c\u307e\u3067\u89e3\u3044\u3066\u304d\u305f\u554f\u984c\u306f\u7c21\u5358\u3059\u304e\u305f\u306e\u3067\u3001\u5c11\u3057\u96e3\u3057\u3044\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n",
                "\n",
                "\u4eca\u5ea6\u306f\u5909\u6570\u306e\u6570\u304c50\u500b\u3067\u30e9\u30f3\u30c0\u30e0\u306b$Q_{ij}$\u304c\u632f\u3089\u308c\u305fQUBO\u3092\u89e3\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 45,
            "metadata": {},
            "outputs": [],
            "source": [
                "N = 50\n",
                "# \u30e9\u30f3\u30c0\u30e0\u306bQij \u3092\u4f5c\u308b\n",
                "import random\n",
                "Q = {(i, j): random.uniform(-1, 1) for i in range(N) for j in range(i+1, N)}\n",
                "\n",
                "# OpenJij\u3067\u89e3\u304f\n",
                "sampler = oj.SASampler()\n",
                "response = sampler.sample_qubo(Q, num_reads=100)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 46,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "array([-55.69322142, -55.69322142, -55.48148676, -55.48148676,\n",
                            "       -55.69322142])"
                        ]
                    },
                    "execution_count": 46,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "# \u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u5c11\u3057\u307f\u3066\u307f\u307e\u3059\u3002\n",
                "response.energies[:5]"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "syclwqyyQyPg"
            },
            "source": [
                "\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u5148\u307b\u3069\u306e\u4f8b\u3068\u306f\u7570\u306a\u308a\u9055\u3046\u5024\u3092\u3068\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002  \n",
                "\u30e9\u30f3\u30c0\u30e0\u306bQij \u3092\u4e0e\u3048\u305f\u5834\u5408\u3001\u4e00\u822c\u306b\u554f\u984c\u306f\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u3002\u3088\u3063\u3066SASampler\u3082\u6bce\u56de\u540c\u3058\u89e3\u3092\u51fa\u3057\u307e\u305b\u3093\u3002  \n",
                "\u3067\u306f\u3069\u306e\u3088\u3046\u306a\u89e3\u304c\u3067\u305f\u306e\u304b\u3092\u3001\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 47,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "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\n",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "import matplotlib.pyplot as plt\n",
                "plt.hist(response.energies, bins=15)\n",
                "plt.xlabel('Energy', fontsize=15)\n",
                "plt.ylabel('Frequency', fontsize=15)\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "K61nEm6fQyPl"
            },
            "source": [
                "\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4f4e\u3044\u307b\u3069\u826f\u3044\u72b6\u614b\u3092\u7b97\u51fa\u3057\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u7a00\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u9ad8\u3044\u72b6\u614b\u3082\u7b97\u51fa\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u5927\u534a\u306e\u8a08\u7b97\u7d50\u679c\u306f\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u6700\u4f4e\u306e\u72b6\u614b\u3092\u7b97\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "\u89e3\u3044\u305f(\u30b5\u30f3\u30d7\u30eb\u3057\u305f)\u72b6\u614b\u306e\u3046\u3061\u4e00\u756a\u4f4e\u3044\u89e3\u304c\u6700\u9069\u89e3\u306b\u8fd1\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u306e\u89e3\u3092.states\u304b\u3089\u63a2\u3057\u307e\u3057\u3087\u3046\u3002\n",
                "> \u6ce8\u610f: SA\u306f\u5fc5\u305a\u3057\u3082\u6700\u9069\u89e3\u3092\u5c0e\u304f\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3088\u3063\u3066\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e00\u756a\u4f4e\u3044\u89e3\u3092\u9078\u3093\u3067\u3082\u6700\u9069\u89e3\u3067\u3042\u308b\u3068\u3044\u3046\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3042\u304f\u307e\u3067\u8fd1\u4f3c\u89e3\u3067\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 50,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "Sample(sample={0: 1, 1: 1, 2: 1, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 0, 9: 0, 10: 1, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 1, 19: 1, 20: 1, 21: 1, 22: 0, 23: 1, 24: 0, 25: 0, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 0, 35: 1, 36: 0, 37: 1, 38: 1, 39: 0, 40: 0, 41: 1, 42: 1, 43: 0, 44: 1, 45: 1, 46: 0, 47: 1, 48: 1, 49: 0}, energy=-55.693221416390145, num_occurrences=1)"
                        ]
                    },
                    "execution_count": 50,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "import numpy as np\n",
                "\n",
                "min_samples = response.first\n",
                "min_samples"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {
                "colab_type": "text",
                "id": "XBp8gWZEQyPr"
            },
            "source": [
                "\u3053\u308c\u3067\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u6700\u3082\u4f4e\u3044\u89e3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u306e`.first`\u306b\u5165\u3063\u3066\u3044\u308b\u72b6\u614b\u304c\u3001\u4eca\u56de\u5f97\u3089\u308c\u305f\u8fd1\u4f3c\u89e3\u3067\u3059\u3002\u3053\u308c\u3067\u300c\u554f\u984c\u3092\u8fd1\u4f3c\u7684\u306b\u89e3\u3044\u305f\u300d\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n",
                "\n",
                "`num_occurrences`\u306f\u8a08\u7b97\u306e\u7d50\u679c\u305d\u306e\u72b6\u614b\u304c\u4f55\u56de\u51fa\u529b\u3055\u308c\u305f\u304b\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n",
                "\n",
                "\u6b21\u56de\u306f \"2-Evaluation\" \u3067 Time to Solution \u3084\u6b8b\u7559\u30a8\u30cd\u30eb\u30ae\u30fc\u306a\u3069\u3001\u89e3\u3092\u306f\u304b\u308b\u6307\u6a19\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        }
    ],
    "metadata": {
        "colab": {
            "include_colab_link": true,
            "name": "1-Introduction.ipynb",
            "provenance": [],
            "version": "0.3.2"
        },
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.2"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}
