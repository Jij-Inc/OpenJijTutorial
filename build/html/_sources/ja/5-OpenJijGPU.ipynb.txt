{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "tcLyUtUqhkTr"
   },
   "source": [
    "# 5-OpenJij GPU"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/source/ja/5_OpenJijGPU.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Vrd0CwLJhvVQ"
   },
   "source": [
    "このセクションではGPUを用いてSimulated Quantum Annealing(SQA)を行う方法をご紹介します。\n",
    "\n",
    "## Google Colabでの設定とインストール\n",
    "\n",
    "一般のPCにはCUDA環境が整っていない、もしくはCUDAに対応するNVIDIAのGPUが搭載されていないこともあります。しかし**Google colaboratory**を使えば誰でもGPGPUを使うことができます。\n",
    "\n",
    "### GPU設定\n",
    "\n",
    "GPU実行したいJupyter NotebookをGoogle Colabで開きます。  \n",
    "\n",
    "```\n",
    "ランタイム > ランタイムのタイプを変更 > ハードウェアアクセラレータをGPUに選択\n",
    "```\n",
    "\n",
    "この設定を行うことでGPUを用いたJupyter Notebookの実行が可能となります。\n",
    "\n",
    "### OpenJijのインストール\n",
    "\n",
    "OpenJijからGPUを用いたモジュールを呼び出すためには、まずpipからのインストールの際にOpenJijをソースコードからビルドする必要があります。\n",
    "この操作のためにCMakeと呼ばれるツールが必要ですが、Google ColabにプリインストールされているCMakeは古いバージョンです。まずはそれをバージョンアップしましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 173
    },
    "colab_type": "code",
    "id": "o8UaiBs1hkwh",
    "outputId": "3a0075b7-00ea-4cad-9ff1-47b0965e833f"
   },
   "outputs": [],
   "source": [
    "!pip install -U cmake"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-DuFQsPK90LI"
   },
   "source": [
    "その後、OpenJijをインストールし直します。一度アンインストールしてから、ソースコードからビルドするオプションである `--no-binary :all:`をpipに付け加えてインストールします。\n",
    "インストールにはしばらく時間がかかります。\n",
    "> 通常pipは一度インストールしたことのあるアプリケーションであればキャッシュからデータを取ってきてしまうので、それも無効化する `--no--cache-dir`もつけます。初めてOpenJijをインストールする際にはこのオプションは不要です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 377
    },
    "colab_type": "code",
    "id": "s1pjFhAa95Zs",
    "outputId": "e398ccc6-abca-420b-8e9b-0626ab3283bc"
   },
   "outputs": [],
   "source": [
    "!pip uninstall openjij -y\n",
    "!pip install openjij --no-binary :all: --no-cache-dir"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "JMgqfmZ-h8X3"
   },
   "source": [
    "## GPUSQA計算\n",
    "\n",
    "OpenJijのGPUでサポートしているのはキメラグラフ上でのモンテカルロ計算です。  \n",
    "まずは GPUSQASampler のインスタンスを作ります。\n",
    "もし、GPU関連のモジュールが見つからないとエラーが出た際には、以前のバージョンが読み込まれている可能性があるので、一度再起動するといいかもしれません。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "TYhWp0eqh3Yb"
   },
   "outputs": [],
   "source": [
    "import openjij as oj\n",
    "\n",
    "sampler = oj.GPUChimeraSQASampler(num_reads=100, unit_num_L=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "oOmEWWBxh_3O"
   },
   "source": [
    "ここで `unit_num_L` はキメラユニットセルが並ぶ2次元格子の1辺の長さを指定します。  \n",
    "上の例では 2×2=4つのキメラユニットセルが並んでいる系を作成しています。キメラユニットセルは8bitで1つを構成しているため、総ビット数は\n",
    "  \n",
    "${\\rm total\\_num} = {\\rm unit\\_num\\_L}^2 \\times 8$\n",
    "\n",
    "のように計算されます。\n",
    "\n",
    "GPUSQASamplerでは、のちに sample_qubo などで少ない変数を指定しても、ここで作ったキメラグラフの系のサイズだけSQA計算を行います。  \n",
    "`unit_num_L`は無駄に大きすぎないように注意しましょう。また`unit_num_L`はコンストラクタで指定しなくても、`sample_qubo`を実行するときの引数としても指定できます。\n",
    "\n",
    "## 実行\n",
    "\n",
    "ではSQAを実行してみましょう。これまで紹介してきたSamplerと同様に、sample_qubo (or sample_ising) で計算を行うことができます。\n",
    "ただし、キメラグラフを満たさない添字の相互作用を指定するとエラーになります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "_XIsZ9z2h_Rv",
    "outputId": "be24e99d-b0b9-4766-c686-815ca027694c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Response(rec.array([([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n",
       "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1)],\n",
       "          dtype=[('sample', 'i1', (4,)), ('energy', '<f8'), ('num_occurrences', '<i8')]), [0, 4, 5, 12], {'system': [], 'sampling_time': 613007.2049982118, 'execution_time': 5268.688350133743, 'list_exec_times': array([8103.3180013 , 7873.31900028, 7825.17199877, 7872.30599963,\n",
       "       7792.76800131, 7593.87200014, 7625.91199964, 7482.52899939,\n",
       "       7432.99399983, 7417.46600033, 7432.96099972, 7366.36799957,\n",
       "       7428.62700099, 7236.23700105, 7419.23100031, 7350.26099937,\n",
       "       7386.48200058, 7441.84500036, 7407.03500014, 7415.7250001 ,\n",
       "       7299.38800032, 7371.710999  , 7383.22500001, 7377.78900111,\n",
       "       7321.36400075, 7398.68399978, 7432.24699909, 7335.25199939,\n",
       "       7368.8299999 , 7459.09500074, 5375.03600026, 4531.83100035,\n",
       "       4532.1180005 , 4332.65600077, 4344.09799891, 4393.281999  ,\n",
       "       4354.3289994 , 4416.1750011 , 4325.57100066, 4285.58099884,\n",
       "       4299.46800068, 4286.38800076, 4321.26099986, 4284.26200051,\n",
       "       4340.93200056, 4283.38299935, 4287.86399971, 4356.57200069,\n",
       "       4270.55      , 4314.58400089, 4254.48100032, 4355.33199925,\n",
       "       4280.94700146, 4316.0009991 , 4231.83699968, 4333.81899893,\n",
       "       4294.46700036, 4251.12299854, 4235.29399995, 4322.45799857,\n",
       "       4257.19499981, 4338.70699999, 4242.10899837, 4298.02899998,\n",
       "       4315.735001  , 4312.46000153, 4248.94000025, 4315.61000005,\n",
       "       4289.10499977, 4330.03900071, 4282.44599971, 4318.12500028,\n",
       "       4310.84400043, 4292.43100007, 4273.68900091, 4292.38300057,\n",
       "       4273.35200038, 4315.81399971, 4285.78700121, 4246.03699867,\n",
       "       4299.35600005, 4259.02400093, 4238.95799941, 4316.84500109,\n",
       "       4248.75200042, 4265.76499922, 4277.85600004, 4279.65800009,\n",
       "       4273.97199928, 4290.23499964, 4312.98200056, 4356.32300105,\n",
       "       4278.21400081, 4294.05099931, 4196.49500145, 4260.50799979,\n",
       "       4256.06900171, 4298.48100066, 4280.20500112, 4282.53600148]), 'schedule': {'beta': 10.0, 'gamma': 1, 'num_sweeps': 100}}, 'BINARY')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q = {(0, 4): -1, (0, 5): -1, (4, 12): 1}\n",
    "response = sampler.sample_qubo(Q)\n",
    "response"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BIXHyB7--qB8"
   },
   "source": [
    "## 全結合模型のキメラグラフへの埋め込み\n",
    "\n",
    "これまで説明したものは、相互作用がキメラグラフ上に存在するもののみの計算でした。以下では全結合の問題のように、相互作用が複雑なものをキメラグラフに埋め込む場合のスクリプトをご紹介します。  \n",
    "キメラグラフへの埋め込みを行うために、`dwave`の`EmbeddingComposite`を併用しましょう。`pip`を用いて`dwave-system`をインストールします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 803
    },
    "colab_type": "code",
    "id": "WcP7nmD2--si",
    "outputId": "a769f387-5ed8-4a91-9115-aa5b82bc6bb7"
   },
   "outputs": [],
   "source": [
    "!pip install dwave-system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "u9Xzb7BHBG1n"
   },
   "source": [
    "そしてsampler部分のスクリプトを以下のように書き換えます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ry1nTJGU-vnI"
   },
   "outputs": [],
   "source": [
    "from dwave.system.composites import EmbeddingComposite\n",
    "\n",
    "gpusqa = oj.GPUSQASampler(num_reads=100, unit_num_L=2)\n",
    "sampler = EmbeddingComposite(gpusqa)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "name": "5-OpenJijGPU.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
