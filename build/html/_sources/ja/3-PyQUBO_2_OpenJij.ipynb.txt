{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# 3-PyQUBO with OpenJij\n", "\n", "\n", "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/3-PyQUBO_2_OpenJij.ipynb)\n", "\n", "\u3053\u3053\u3067\u306f\uff0cPyQUBO\u306b\u3088\u308b\u30b3\u30b9\u30c8\u95a2\u6570\u306eQUBO\u3078\u306e\u5909\u63db\u65b9\u6cd5\u3068Simulated Annealing\u3001\u305d\u3057\u3066OpenJij\u3078\u306e\u5909\u6570\u53d7\u3051\u6e21\u3057\u306a\u3069\u306b\u3064\u3044\u3066\u30af\u30ea\u30fc\u30af\u88ab\u8986\u554f\u984c\u3092\u4f8b\u306b\u3054\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "view-in-github"}, "source": ["<a href=\"https://colab.research.google.com/github/\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"]}, {"cell_type": "markdown", "metadata": {}, "source": ["pip\u3092\u7528\u3044\u3066`pyqubo`\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002  "]}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["!pip install pyqubo"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## PyQUBO \u3092\u4f7f\u3063\u305f QUBO\u306e\u5b9a\u5f0f\u5316\n", "\n", "`PyQUBO`\u306f\u3001\u76f4\u611f\u7684\u306bQUBO\u3084Ising model\u3092\u5b9a\u5f0f\u5316\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002  \n", "\u3053\u308c\u307e\u3067\u306e\u7ae0\u3067\u306fPyQUBO\u3092\u7528\u3044\u306a\u3044\u5834\u5408\u3092\u3054\u7d39\u4ecb\u3057\u3066\u304d\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u306fQUBO\u306a\u3069\u3092\u5b9a\u5f0f\u5316\u3057\u305f\u306e\u3061\u3001\u81ea\u5206\u3067\u5f0f\u3092\u5c55\u958b\u3057\u3066python\u306e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057PyQUBO\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u624b\u9593\u3092\u306a\u304f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002PyQUBO\u306fQUBO\u5316, Ising model\u5316\u3092\u65bd\u3059\u3068\u304d\u306e\u8a08\u7b97\u30df\u30b9\u3084\u5b9f\u88c5\u30df\u30b9\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n", "\n", "\u4eca\u56de\u306f\u30af\u30ea\u30fc\u30af\u88ab\u8986\u554f\u984c\u3092\u4f8b\u306b\u3057\u3066PyQUBO\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n", "\n", "\u30af\u30ea\u30fc\u30af\u88ab\u8986\u554f\u984c\u306b\u95a2\u3057\u3066\u306f\u3001[\u3053\u3061\u3089 (T-Wave:\u30af\u30ea\u30fc\u30af\u88ab\u8986\u554f\u984c)](https://qard.is.tohoku.ac.jp/T-Wave/?p=434) \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u30af\u30ea\u30fc\u30af\u88ab\u8986\u554f\u984c\u306eQUBO\u8868\u73fe\u306b\u3088\u308b\u5b9a\u5f0f\u5316\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n", "\u30b0\u30e9\u30d5 $G=(V, E)$\u3092$n$\u500b\u306e\u30af\u30ea\u30fc\u30af\u3067\u88ab\u8986\u3067\u304d\u308b\u304b\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u3002\n", "QUBO\u8868\u73fe\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059([\u3053\u3053:T-Wave](https://qard.is.tohoku.ac.jp/T-Wave/?p=434) \u3068\u540c\u3058\u8a18\u6cd5\u3092\u7528\u3044\u307e\u3059)\u3002\n", "\n", "$$H = A\\sum_v \\left(1-\\sum^n_{i=1} x_{v, i}\\right)^2 \n", "+ B \\sum^n_{i=1}\\left[\n", "\\frac{1}{2}\\left(-1+\\sum_{v \\in V} x_{v,i}\\right)\\sum_{v \\in V} x_{v, i} \n", "- \\sum_{(u, v)\\in E} x_{u,i} x_{v, i}\\right]$$\n", "\n", "\n", "\u7b2c\u4e00\u9805\u306f\u5404\u9802\u70b9\u306b1\u8272\u3060\u3051\u5857\u308b\u3068\u3044\u3046\u5236\u7d04\u9805\u3067\u3059\u3002\u7b2c\u4e8c\u9805\u306f\u5206\u5272\u3057\u305f\u90e8\u5206\u30b0\u30e9\u30d5\u304c\u3069\u308c\u3060\u3051\u30af\u30ea\u30fc\u30af(\u5b8c\u5168\u30b0\u30e9\u30d5)\u306b\u8fd1\u3044\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u9805\u30820\u306b\u306a\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u304c\u3001\u3053\u3053\u3067\u306f\u7b2c\u4e00\u9805\u3092\u30da\u30ca\u30eb\u30c6\u30a3\u9805\u3001\u7b2c\u4e8c\u9805\u3092\u30b3\u30b9\u30c8(\u76ee\u7684\u95a2\u6570)\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002  \n", "\u3053\u306eQUBO\u3092PyQUBO\u3092\u4f7f\u3063\u3066\u8868\u73fe\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u4eca\u56de\u306f\u30b0\u30e9\u30d5\u3068\u30af\u30ea\u30fc\u30af\u306e\u6570$n$\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e0e\u3048\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [], "source": ["# \u9802\u70b9\u306e\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n", "N_VER = 8\n", "# \u8272\u306e\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n", "N_COLOR = 4\n", "# \u30b0\u30e9\u30d5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u30020~7\u306e\u9802\u70b9\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u3069\u306e\u9802\u70b9\u540c\u58eb\u304c\u7dda\u3067\u7d50\u3070\u308c\u3066\u3044\u308b\u304b\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n", "graph = [(0,1), (0,2), (1,2), (5,6), (2,3), (2,5), (3,4), (5,7), (7, 6)]"]}, {"cell_type": "markdown", "metadata": {}, "source": ["### PyQUBO\u306b\u3088\u308b\u5b9a\u5f0f\u5316\n", "\n", "PyQUBO\u304b\u3089\u5fc5\u8981\u3068\u306a\u308b\u30af\u30e9\u30b9\u3092import \u3057\u3066\u304a\u304d\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [], "source": ["from pyqubo import Array, Constraint, solve_qubo"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u6700\u521d\u306bQUBO\u3092\u8868\u73fe\u3059\u308b\u5909\u6570\u3092\u7528\u610f\u3057\u307e\u3057\u3087\u3046\u3002Array\u3092\u4f7f\u3063\u3066\u5909\u6570\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\n", "\u4eca\u56de\u306f(\u9802\u70b9\u306e\u6570)\u00d7(\u8272\u306e\u6570)\u3060\u3051\u5909\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u305d\u306e\u5206\u3092`shape`\u3092\u7528\u3044\u3066\u6e96\u5099\u3057\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [], "source": ["x = Array.create('x', shape=(N_VER,N_COLOR), vartype='BINARY')"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u3053\u308c\u3067(N_VER)\u884c(N_COLOR)\u5217\u306e\u30d0\u30a4\u30ca\u30ea\u5909\u6570'x'\u306e\u4f5c\u6210\u304c\u3067\u304d\u307e\u3057\u305f\u3002  \n", "\u6b21\u306bQUBO\u3092\u4f5c\u308a\u307e\u3059\u3002\u6bd4\u8f03\u7684\u6570\u5f0f\u901a\u308a\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 6, "metadata": {}, "outputs": [], "source": ["# \u7b2c\u4e00\u9805 (\u5236\u7d04\u9805)\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n", "H_A = Constraint(sum((1-sum(x[v,i] for i in range(1,N_COLOR)))**2 for v in range(N_VER)), label='HA')\n", "# \u7b2c\u4e8c\u9805 (\u30b3\u30b9\u30c8\u3001\u76ee\u7684\u95a2\u6570)\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n", "H_B = sum((-1+sum(x[v,i] for v in range (N_VER)))/2*(sum(x[v,i] for v in range (N_VER))) - sum(x[u,i]*x[v,i] for (u,v) in graph) for i in range (1,N_COLOR))\n", "# \u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u5168\u4f53\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n", "Q = H_A+H_B"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u7b2c\u4e00\u9805\u3067PyQUBO\u306e`Constraint`\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u300c\u3053\u306e\u9805\u306f\u5236\u7d04\u9805\u3067\u3042\u308b\u300d\u3068\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u8a8d\u8b58\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002  \n", "\u4f5c\u6210\u3057\u305f\u30b3\u30b9\u30c8\u95a2\u6570\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Q.compile().to_qubo()` \u3067\u7c21\u5358\u306bQUBO(Python\u306e\u8f9e\u66f8\u578b)\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002  \n", "OpenJij\u3084D-Wave Ocean\u3067\u306f\u3001QUBO\u306fPython\u306e\u8f9e\u66f8\u578b\u3067\u8868\u73fe\u3055\u308c\u308b\u3053\u3068\u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002`.compile`\u3059\u308c\u3070\u3042\u3068\u306f\u305d\u306e\u307e\u307e\u5404\u30bd\u30eb\u30d0\u30fc\u306b\u6295\u3052\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002"]}, {"cell_type": "code", "execution_count": 8, "metadata": {}, "outputs": [], "source": ["# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n", "model = Q.compile()\n", "qubo, offset = model.to_qubo()"]}, {"cell_type": "markdown", "metadata": {}, "source": ["`qubo`\u306b\u306fPython\u306e\u8f9e\u66f8\u578b\u3067\u683c\u7d0d\u3055\u308c\u305fQUBO\u304c\u3001\u305d\u3057\u3066`offset`\u306b\u306fQUBO\u5316\u3057\u305f\u969b\u306b\u73fe\u308c\u308b\u5b9a\u6570(\u7121\u8996\u3057\u3066\u3088\u3044)\u304c\u4ee3\u5165\u3055\u308c\u307e\u3059\u3002\n", "\n", "PyQUBO\u306b\u3082Simulated Annealing\u306e\u30bd\u30eb\u30d0\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306fD-Wave Ocean SDK\u306e\u4e2d\u306eneal\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4e2d\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u306b\u306f`solve_qubo(qubo)`\u3092\u7528\u3044\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 19, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["{'x[0][1]': 0, 'x[0][2]': 0, 'x[0][3]': 1, 'x[1][1]': 0, 'x[1][2]': 0, 'x[1][3]': 1, 'x[2][1]': 0, 'x[2][2]': 0, 'x[2][3]': 1, 'x[3][1]': 0, 'x[3][2]': 1, 'x[3][3]': 0, 'x[4][1]': 0, 'x[4][2]': 1, 'x[4][3]': 0, 'x[5][1]': 1, 'x[5][2]': 0, 'x[5][3]': 0, 'x[6][1]': 1, 'x[6][2]': 0, 'x[6][3]': 0, 'x[7][1]': 1, 'x[7][2]': 0, 'x[7][3]': 0}\n"]}], "source": ["# PyQUBO\u306b\u5099\u308f\u3063\u3066\u3044\u308bSA\u3092\u7528\u3044\u3066\u89e3\u304d\u307e\u3059\u3002\n", "raw_solution = solve_qubo(qubo)\n", "print(raw_solution)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u5f97\u3089\u308c\u305f\u89e3\u3092\u898b\u3066\u307f\u308b\u3068\u3001'x[0][0]': 1\u306e\u3088\u3046\u306b\u6587\u5b57\u5217\u3092\u30ad\u30fc\u306b\u3057\u305f\u8f9e\u66f8\u578b\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3060\u3068\u3001\u4eca\u5f8c\u306e\u89e3\u6790\u304c\u3057\u3065\u3089\u3044\u3067\u3059\u3002PyQUBO\u306b\u306f\u305d\u308c\u3092\u6271\u3044\u3084\u3059\u3044\u5f62\u306b\u76f4\u3059\u30c7\u30b3\u30fc\u30c9\u6a5f\u80fd`.decode_solution()`\u304c\u3042\u308a\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [], "source": ["# \u5f97\u3089\u308c\u305f\u7d50\u679c\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\n", "decoded_solution, broken, energy = model.decode_solution(raw_solution, vartype=\"BINARY\")"]}, {"cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [{"data": {"text/plain": ["{0: {1: 1, 2: 0, 3: 0},\n", " 1: {1: 1, 2: 0, 3: 0},\n", " 2: {1: 1, 2: 0, 3: 0},\n", " 3: {1: 0, 2: 0, 3: 1},\n", " 4: {1: 0, 2: 0, 3: 1},\n", " 5: {1: 0, 2: 1, 3: 0},\n", " 6: {1: 0, 2: 1, 3: 0},\n", " 7: {1: 0, 2: 1, 3: 0}}"]}, "execution_count": 11, "metadata": {}, "output_type": "execute_result"}], "source": ["decoded_solution['x']"]}, {"cell_type": "markdown", "metadata": {}, "source": ["(0,1,2), (3, 4), (5,6,7)\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3089\u308c\u305f\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u4eca\u56de\u4e0e\u3048\u305f\u30b0\u30e9\u30d5\u4e0a\u3067\u305d\u308c\u305e\u308c\u30af\u30ea\u30fc\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n", "\n", "`broken`\u306f\u30da\u30ca\u30eb\u30c6\u30a3\u9805(\u4eca\u56de\u306f\u7b2c\u4e00\u9805)\u304c\u7834\u308c\u3066\u3044\u308b\u3068\u304d(0\u3067\u306a\u3044\u3068\u304d)\u3001\u3069\u306e\u3088\u3046\u306b\u7834\u308c\u305f\u304b\u3092\u8a18\u9332\u3057\u3066\u304f\u308c\u307e\u3059\u3002  "]}, {"cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["{}\n"]}], "source": ["print(broken)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u4eca\u56de\u306f\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u7a7a\u306e\u8f9e\u66f8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002  \n", "decode\u306e\u6a5f\u80fd\u306f\u3053\u306e\u3088\u3046\u306b\u5236\u7d04\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u81ea\u52d5\u7684\u306b\u30c1\u30a7\u30c3\u30af\u3067\u304d\u308b\u3001\u975e\u5e38\u306b\u4fbf\u5229\u306a\u95a2\u6570\u3067\u3059\u3002"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## OpenJij \u306b\u6295\u3052\u308b\n", "\n", "\u5148\u307b\u3069\u306fPyQUBO\u306eSA\u3067\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u6b21\u306fOpenJij\u306b\u6295\u3052\u3066\u307f\u307e\u3057\u3087\u3046\u3002  \n", "OpenJij\u3067\u3082SA\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067PyQUBO\u306b\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044SQA(Simulated quantum annealing)\u3092\u7528\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 13, "metadata": {}, "outputs": [], "source": ["# OpenJij\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n", "import openjij as oj\n", "\n", "# SQA\u3092\u7528\u3044\u3066\u554f\u984c\u3092\u89e3\u304d\u307e\u3059\u3002\n", "sampler = oj.SQASampler()\n", "# QUBO\u306b\u5148\u307b\u3069.to_qubo\u3067\u4f5c\u6210\u3057\u305f\u3082\u306e\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n", "response = sampler.sample_qubo(Q=qubo)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["`sampler`\u306e\u90e8\u5206\u3092\u53d6\u308a\u66ff\u3048\u308b\u3060\u3051\u3067\u3001\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30de\u30b7\u30f3\u306b\u6295\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u8a66\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n", "\n", "\u3067\u306fOpenJij\u3067\u8fd4\u3063\u3066\u304d\u305f\u7d50\u679c\u3092\u3001PyQUBO\u306e\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u4f7f\u3063\u3066\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n", "\u5177\u4f53\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [{"data": {"text/plain": ["{0: {1: 0, 2: 1, 3: 0},\n", " 1: {1: 0, 2: 1, 3: 0},\n", " 2: {1: 0, 2: 1, 3: 0},\n", " 3: {1: 1, 2: 0, 3: 0},\n", " 4: {1: 1, 2: 0, 3: 0},\n", " 5: {1: 0, 2: 0, 3: 1},\n", " 6: {1: 0, 2: 0, 3: 1},\n", " 7: {1: 0, 2: 0, 3: 1}}"]}, "execution_count": 17, "metadata": {}, "output_type": "execute_result"}], "source": ["# \u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e00\u756a\u4f4e\u3044\u72b6\u614b\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n", "dict_solution = response.first.sample\n", "# \u30c7\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\n", "decoded_solution, broken, energy = model.decode_solution(dict_solution, vartype=\"BINARY\")\n", "# \u8f9e\u66f8\u578b\u3092sort\u3057\u3066\u898b\u3084\u3059\u304f\u3059\u308b\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n", "x_solution = dict(sorted(decoded_solution['x'].items()))\n", "{key:dict(sorted(value.items())) for key, value in x_solution.items()}"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## \u307e\u3068\u3081\n", "\n", "PyQUBO\u3092\u4f7f\u3063\u3066\u5b9a\u5f0f\u5316\u3059\u308b\u65b9\u6cd5\u3068OpenJij\u3068\u306e\u9023\u643a\u3092\u898b\u307e\u3057\u305f\u3002\n", "\n", "\u624b\u9806\u3068\u3057\u3066\u306f\n", "\n", "1. pyqubo.Array\u3067\u5909\u6570\u3092\u7528\u610f\n", "2. QUBO\u3092\u5b9a\u5f0f\u5316\n", "3. QUBO\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u8f9e\u66f8\u578b\u306b\u5909\u63db\n", "4. \u8f9e\u66f8\u578bQUBO\u3092\u53d7\u3051\u4ed8\u3051\u308bOpenJij\u306a\u3069\u306e\u30bd\u30eb\u30d0\u30fc\u306b\u6295\u3052\u3066\u6700\u9069\u5316\u554f\u984c\u3092\u89e3\u304f\n", "5. \u8fd4\u3063\u3066\u304d\u305f\u89e3\u3092\u6dfb\u5b57\u3092\u30ad\u30fc\u3068\u3057\u305f\u8f9e\u66f8\u578b\u306b\u3057\u3066decode\u3059\u308b\n", "\n", "\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\u3002  \n", "PyQUBO\u306f\u5b9a\u5f0f\u5316\u3001\u5236\u7d04\u306e\u8a55\u4fa1\u3092\u884c\u3046\u975e\u5e38\u306b\u4fbf\u5229\u3067\u5354\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002  \n", "\u69d8\u3005\u306a\u30bd\u30eb\u30d0\u30fc\u3092\u63d0\u4f9b\u3059\u308bOpenJij\u3068\u3046\u307e\u304f\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u3067\u3001\u3088\u308a\u5feb\u9069\u306a\u958b\u767a\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}, {"cell_type": "markdown", "metadata": {}, "source": ["\u53c2\u8003\uff1aPyQUBO\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n", "https://pyqubo.readthedocs.io/en/latest/reference/array.html?highlight=arry%20create"]}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": []}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.6.9"}}, "nbformat": 4, "nbformat_minor": 2}