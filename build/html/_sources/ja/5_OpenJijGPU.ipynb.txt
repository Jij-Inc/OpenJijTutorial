{"cells": [{"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "view-in-github"}, "source": ["<a href=\"https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/5_OpenJijGPU.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "view-in-github"}, "source": ["<a href=\"https://colab.research.google.com/github/\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "tcLyUtUqhkTr"}, "source": ["# 5-OpenJij GPU\n", "\n", "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/5-OpenJijGPU.ipynb)"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "Vrd0CwLJhvVQ"}, "source": ["OpenJij\u3067\u306f\u73fe\u5728(0.0.6)\u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u69cb\u9020\u306e\u307fGPU\u3067\u306eSQA\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n", "\n", "\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fGPU\u3067SQA\u3092\u884c\u3063\u3066\u304d\u307e\u3059\u3002\n", "\n", "\n", "\u4e00\u822c\u306bPC\u306b\u306fGPGPU\u306f\u8f09\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u5b9f\u884c\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001Google colaboratory \u3092\u4f7f\u3048\u3070\u8ab0\u3067\u3082GPGPU\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n", "\n", "\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092 Google colaboratory \u3067\u958b\u3044\u3066\u3001\n", "\n", "```\n", "\u30e9\u30f3\u30bf\u30a4\u30e0 -> \u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u30bf\u30a4\u30d7\u3092\u5909\u66f4\u3000-> \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3092GPU\u306b\u9078\u629e\n", "```\n", "\n", "\u3092\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u3042\u3068\u306bopenjij\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070GPU\u5411\u3051\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u884c\u308f\u308c\u308b\u306e\u3067GPU\u306eSampler\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 1, "metadata": {"colab": {"base_uri": "https://localhost:8080/", "height": 311}, "colab_type": "code", "id": "o8UaiBs1hkwh", "outputId": "633594ee-f863-467b-d633-e68ee2343af6"}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["Requirement already satisfied: openjij in /usr/local/lib/python3.6/dist-packages (0.0.6)\n", "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from openjij) (1.16.3)\n", "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from openjij) (2.21.0)\n", "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->openjij) (1.24.3)\n", "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->openjij) (2.8)\n", "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->openjij) (3.0.4)\n", "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->openjij) (2019.3.9)\n", "Name: openjij\n", "Version: 0.0.6\n", "Summary: Framework for the Ising model and QUBO\n", "Home-page: https://openjij.github.io/OpenJij/\n", "Author: Jij Inc.\n", "Author-email: openjij@j-ij.com\n", "License: Apache License 2.0\n", "Location: /usr/local/lib/python3.6/dist-packages\n", "Requires: requests, numpy\n", "Required-by: \n"]}], "source": ["!pip install openjij\n", "!pip show openjij  # openjij == 0.0.6 \u3092\u4eee\u5b9a\u3057\u307e\u3059"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "JMgqfmZ-h8X3"}, "source": ["## \u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\n", "\n", "OpenJij\u306eGPU\u3067\u306f\u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u306e\u307f\u304c\u6271\u3048\u307e\u3059\u3002  \n", "\u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u306f\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306a\u5f62\u3067\u3059\u3002\n", "\n", "\u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u3092\u6e80\u305f\u3055\u306a\u3044\u6dfb\u5b57\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n", "`GPUChimeraSQASampler` \u3067\u306f\n", "\n", "- \u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u306e\u30ce\u30fc\u30c9\u306b\u4e00\u3064\u305a\u3064\u756a\u53f7\u3092\u3064\u3051\u305f\u6dfb\u5b57\n", "\n", "\u304c\u4f7f\u3048\u307e\u3059\u3002\n", "\n", "\u65e9\u901f\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n", "\n", "\u307e\u305a\u306f GPUChimeraSQASampler \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002"]}, {"cell_type": "code", "execution_count": 3, "metadata": {"colab": {}, "colab_type": "code", "id": "TYhWp0eqh3Yb"}, "outputs": [], "source": ["import openjij as oj\n", "\n", "sampler=oj.GPUChimeraSQASampler(num_reads=100, unit_num_L=2)"]}, {"cell_type": "markdown", "metadata": {"colab_type": "text", "id": "oOmEWWBxh_3O"}, "source": ["\u3053\u3053\u3067 `unit_num_L` \u306f\u30ad\u30e1\u30e9\u30e6\u30cb\u30c3\u30c8\u30bb\u30eb\u304c\u4e26\u30762\u6b21\u5143\u683c\u5b50\u306e1\u8fba\u306e\u9577\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002  \n", " `unit_num_L=2`\u3067\u306f 2\u00d72=4\u3064\u306e\u30ad\u30e1\u30e9\u30e6\u30cb\u30c3\u30c8\u30bb\u30eb\u304c\u4e26\u3093\u3067\u3044\u308b\u7cfb\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n", "  \n", "GPUChimeraSQASampler \u3067\u306f \u306e\u3061\u306b sample_qubo \u306a\u3069\u3067\u5c11\u306a\u3044\u5909\u6570\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001\n", "\u3053\u3053\u3067\u4f5c\u3063\u305f\u30ad\u30e1\u30e9\u30b0\u30e9\u30d5\u306e\u7cfb\u306e\u30b5\u30a4\u30ba\u3060\u3051 SQA\u3092\u56de\u3059\u306e\u3067 `unit_num_L`\u306f\u7121\u99c4\u306b\u5927\u304d\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n", "\n", "\u307e\u305f`unit_num_L`\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u3001`sample_qubo`\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u5f15\u6570\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n", "\n", "\u3067\u306fSQA\u3092\u56de\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ed6\u306esampler \u3068\u4e00\u7dd2\u3067 sample_qubo (or sample_ising) \u3067OK\u3067\u3059\u3002"]}, {"cell_type": "code", "execution_count": 4, "metadata": {"colab": {"base_uri": "https://localhost:8080/", "height": 69}, "colab_type": "code", "id": "_XIsZ9z2h_Rv", "outputId": "f724bfc5-fc59-434b-ccb7-155b4549874a"}, "outputs": [{"data": {"text/plain": ["Response(rec.array([([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1),\n", "           ([1, 1, 1, 0], -2., 1), ([1, 1, 1, 0], -2., 1)],\n", "          dtype=[('sample', 'i1', (4,)), ('energy', '<f8'), ('num_occurrences', '<i8')]), [0, 4, 5, 12], {'system': [], 'sampling_time': 393885.4129992251, 'execution_time': 3178.1388703893754, 'list_exec_times': array([8798.91399745, 3455.1839999 , 3429.37000096, 3447.03500014,\n", "       3424.60699903, 3444.63000147, 3453.83500098, 3613.29299994,\n", "       3457.84800083, 3406.19299823, 3439.38100195, 3433.23900233,\n", "       3423.40300267, 3452.73799758, 3405.74199799, 3408.88899882,\n", "       3404.67099886, 3417.60499941, 3414.43499929, 3420.70600163,\n", "       3404.37099658, 3386.27900055, 3422.43499836, 3430.56000202,\n", "       3346.02700241, 3374.39800205, 3340.05100012, 3355.68299852,\n", "       3366.27800061, 3345.96500034, 3367.9090011 , 3511.80100188,\n", "       3397.61100258, 3345.86399913, 3390.97800315, 3355.59999803,\n", "       3366.43700211, 3371.82500152, 3448.69000037, 3340.149     ,\n", "       3331.85800264, 3367.54000091, 3393.97800053, 3346.99599989,\n", "       3353.58099983, 3374.21400036, 3404.61400265, 3369.41700152,\n", "       3364.24499983, 3365.49599888, 3400.11200024, 3362.90400082,\n", "       3367.16899983, 3361.52199816, 3355.35900012, 3353.03000247,\n", "       3351.89500038, 3380.5230014 , 3371.27000239, 3332.19000095,\n", "       3358.82199943, 3396.95200091, 3357.32700114, 3386.16900262,\n", "       3364.67200032, 3348.88200086, 3346.09900165, 3362.80400006,\n", "       2640.11499894, 2544.75800102, 2544.4870007 , 2527.90800005,\n", "       2528.7760036 , 2563.5910024 , 2546.8979984 , 2514.41300134,\n", "       2545.99400068, 2551.40599984, 2558.14900083, 2534.84800123,\n", "       2534.01699956, 2497.31100121, 2528.01799797, 2589.88600035,\n", "       2527.06399988, 2580.05200158, 2533.75099783, 2521.50399683,\n", "       2648.1169989 , 2579.22300079, 2568.34000174, 2576.03999853,\n", "       2565.58500041, 2575.2420006 , 2556.1370021 , 2543.83599895,\n", "       2582.48600221, 2554.00199967, 2571.78699758, 2529.87700151]), 'schedule': {'beta': 10.0, 'gamma': 1.0, 'num_sweeps': 100}}, 'BINARY')"]}, "execution_count": 4, "metadata": {}, "output_type": "execute_result"}], "source": ["Q = {(0, 4): -1, (0, 5): -1, (4, 12): 1}\n", "response = sampler.sample_qubo(Q)\n", "response"]}], "metadata": {"accelerator": "GPU", "colab": {"include_colab_link": true, "name": "5-OpenJijGPU.ipynb", "provenance": [], "version": "0.3.2"}, "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.2"}}, "nbformat": 4, "nbformat_minor": 1}