{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/1-Introduction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Y4hVgt6yQyOa"
   },
   "source": [
    "# 1-OpenJij 入門\n",
    "\n",
    "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/1-Introduction.ipynb)\n",
    "\n",
    "OpenJijは Isingモデル, QUBOのヒューリステック最適化ライブラリです。  \n",
    "最適化のコア部分はc++で実装されていますが、Pythonインターフェースを備えているため、Pythonで簡単に書くことができます。\n",
    "\n",
    "pip でインストールしましょう。numpy が必要です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JZW9IAE9QyOd"
   },
   "outputs": [],
   "source": [
    "# !pip install openjij"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wyu_ZSisQyOg",
    "outputId": "09252d51-5c0a-43c7-af4f-95edea5170af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: openjij\r\n",
      "Version: 0.0.5\r\n",
      "Summary: Framework for ising model and QUBO\r\n",
      "Home-page: https://openjij.github.io/OpenJij/\r\n",
      "Author: Jij Inc.\r\n",
      "Author-email: openjij@j-ij.com\r\n",
      "License: Apache License 2.0\r\n",
      "Location: /usr/local/miniconda3/lib/python3.6/site-packages\r\n",
      "Requires: numpy, requests\r\n",
      "Required-by: \r\n"
     ]
    }
   ],
   "source": [
    "!pip show openjij  # openjij == 0.0.5 を仮定します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "x9a_Imk1QyOn"
   },
   "source": [
    "### Ising model\n",
    "\n",
    "Ising model は物理で扱われるモデルで以下のように書かれます。\n",
    "\n",
    "$$H(\\{\\sigma_i\\}) = \\sum_{i > j} J_{ij}\\sigma_i \\sigma_j + \\sum_{i=1}^N h_i \\sigma_i$$\n",
    "$$\\sigma_i \\in \\{-1, 1\\}, i=1,\\cdots N$$\n",
    "\n",
    "$H(\\{\\sigma_i\\})$がハミルトニアンと呼ばれますが、エネルギーやコスト関数だと思ってください。  \n",
    "$\\sigma_i$は2値$(1, -1)$を取る変数です。  \n",
    "\n",
    "> $\\sigma_i$は物理ではスピンという物理量に対応するため、スピン変数もしくは単純にスピンと呼ばれることもあります。  \n",
    "> スピンとは小さな磁石のようなものです。-1 が磁石が上向き、1が下向きのように変数の値と物理(磁石の向き)が対応します。\n",
    "\n",
    "$H$は変数の組み合わせ$\\{\\sigma_i\\} = \\{\\sigma_1, \\sigma_2, \\cdots, \\sigma_N\\}$に依存します。  \n",
    "$J_{ij}, h_i$が与えられる問題を表し、それぞれ、相互作用、縦磁場と呼ばれます。\n",
    "\n",
    "OpenJijは$J_{ij} と h_i$が与えられたときに$H(\\{\\sigma_i\\})$を最小化するスピン変数の組み$\\{\\sigma_i\\}$を探してくれるライブラリです。\n",
    "\n",
    "具体的な例を一つ見ましょう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "j0iZqoWtQyOn"
   },
   "source": [
    "## OpenJijに問題を投げてみる\n",
    "\n",
    "変数の数が$N=5$で縦磁場と相互作用が\n",
    "\n",
    "$$h_i = -1~\\text{for} ~\\forall i, ~ J_{ij} = -1~\\text{for} ~\\forall i, j$$\n",
    "\n",
    "だとしましょう。この場合全ての相互作用がマイナスなので各スピン変数は同じ値をとった方がエネルギーは低くなります。  \n",
    "また縦磁場は全てマイナスです。この場合各スピンは1の値をとった方がエネルギーが低くなります。  \n",
    "よってこの場合の答えは $\\{\\sigma_i\\} = \\{1, 1, 1, 1, 1\\}$になります。\n",
    "\n",
    "では、OpenJijを使って計算してみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "__t71MHRQyOo",
    "outputId": "88f2218f-097d-429f-bf31-b34f1bcc249e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h_i:  {0: -1, 1: -1, 2: -1, 3: -1, 4: -1}\n",
      "Jij:  {(0, 1): -1, (0, 2): -1, (0, 3): -1, (0, 4): -1, (1, 2): -1, (1, 3): -1, (1, 4): -1, (2, 3): -1, (2, 4): -1, (3, 4): -1}\n"
     ]
    }
   ],
   "source": [
    "import openjij as oj\n",
    "\n",
    "# 問題を表す縦磁場と相互作用を作ります。OpenJijでは辞書型で問題を受け付けます。\n",
    "N = 5\n",
    "h = {i: -1 for i in range(N)}\n",
    "J = {(i, j): -1 for i in range(N) for j in range(i+1, N)}\n",
    "\n",
    "print('h_i: ', h)\n",
    "print('Jij: ', J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ze-Ui2z-QyOs",
    "outputId": "7fc94511-7781-4096-9313-1f117cffcca9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1, 1, 1, 1]]\n",
      "[{0: 1, 1: 1, 2: 1, 3: 1, 4: 1}]\n"
     ]
    }
   ],
   "source": [
    "# まず問題を解いてくれるSamplerのインスタンスを作ります。このインスタンスの選択で問題を解くアルゴリズムを選択できます。\n",
    "sampler = oj.SASampler()\n",
    "# samplerのメソッドに問題(h, J)を投げて問題を解きます。\n",
    "response = sampler.sample_ising(h, J)\n",
    "\n",
    "# 計算した結果(状態)は result.states に入っています。\n",
    "print(response.states)\n",
    "\n",
    "# もしくは添字付きでみるには samples を見ます。\n",
    "print(response.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "feViwN6zQyO0"
   },
   "source": [
    "## OpenJijの解説\n",
    "\n",
    "では、上で解いてみたコードの解説をします。  \n",
    "またOpenJijは現在インターフェースを2つ備えていて、上記で使ったものはD-Wave Oceanと同じようなインターフェースになっているので、OpenJijで慣れておけばOceanへの変更はそこまで負担にはならないかと思います。\n",
    "\n",
    "> もう一つのインターフェースについてはここでは解説しませんが、OpenJijの仕組み`graph, method, algorithm`を直接使うことで拡張のしやすさを備えています。しかし現状は上記のセルで扱ったインターフェースを使えるようになるだけで十分でしょう。\n",
    "\n",
    "### Sampler\n",
    "\n",
    "先ほどは問題を辞書型で作ったあとに、Samplerのインスタンスを作りました。\n",
    "```python\n",
    "sampler = oj.SASampler()\n",
    "```\n",
    "ここでこのSamplerというのが、どういうアルゴリズム、マシンを使うかを選択するところになります。他のアルゴリズムを試したい時はこのSamplerを変更します。\n",
    "\n",
    "> OpenJijで扱っているアルゴリズムはヒューリスティックな確率アルゴリズムで問題を解くたびに返す解が違ったり、必ずしも最適解を得ることができません。\n",
    "> なので何回も解いてみてその中でよい解を探すという手法をとります。なので解をサンプリングするという気持ちを込めてSamplerと呼んでいます。\n",
    "\n",
    "上のセルであつかった`SASampler`は`Simulated annealing`というアルゴリズムで解をサンプリングしてくるSamplerです。  \n",
    "他にも\n",
    "\n",
    "- SQASampler : Simulated quantum annealing(SQA) という量子アニーリングを古典コンピュータでシミュレーションするアルゴリズム.\n",
    "- GPUSQASampler : SQAをGPUで実行するSampler. Chimeraグラフという特殊な構造のみが現状扱える. 不安定.\n",
    "\n",
    "というSamplerが用意されています。\n",
    "\n",
    "### sample_ising(h, J)\n",
    "まあ書いてあるように問題を解く時は `.sample_ising(h, J)`はで問題を投げて解きます。\n",
    "\n",
    "後から解説しますが、ちなみにIsingモデルと等価なQUBOの最適化を行う時は`.sample_qubo(Q)`を使います。\n",
    "\n",
    "### Response\n",
    "\n",
    "`.sample_ising(h, J)`はResponseクラスを返します。ResponseクラスにはSamplerが解いて出てきた解と各解のエネルギーが入っています。\n",
    "\n",
    "- .states :\n",
    "    - type : list(list(int))\n",
    "    - iteration回だけおこなった分の解が格納されている\n",
    "    > 物理ではスピンの配列(解)を状態と呼ぶことがあります。.statesにはiteration回だけ解いた解が格納されているので複数の状態を格納しているという気持ちを込めて .states としています。\n",
    "- .energies:\n",
    "    - type : list(float)\n",
    "    - iteration回だけおこなった各解のエネルギーが格納されている\n",
    "- .indices:\n",
    "    - type: list(object)\n",
    "    - 解がlistでstatesに入っているが、それに対応する各スピンの添字を格納する\n",
    "- .samples:\n",
    "    - type: dict(key=index, value=variable value)\n",
    "    - 添字付きで状態が格納されています。\n",
    "- .min_samples:\n",
    "    - type: dict\n",
    "    - 'min_states', 'num_occurences', 'min_energy' というキーが入っており、  \n",
    "      それぞれ最小エネルギー値をとった状態のリスト, 各状態が現れた回数, 最小エネルギー値 となっています。\n",
    "\n",
    "というパラメータが参照できます。わかりずらいので実際にコードを見てみましょう。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YWlbtQh7QyO1",
    "outputId": "4eb10ab9-1bfa-442d-effb-d309923d53f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1],\n",
       " [1, 1, -1]]"
      ]
     },
     "execution_count": 5,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 実は h, J の添字を示す、辞書のkeyは数値以外も扱えます。\n",
    "h = {'a': -1, 'b': -1}\n",
    "J = {('a', 'b'): -1, ('b', 'c'): 1}\n",
    "sampler = oj.SASampler(iteration=10)  # 10回 SAで解いてみる. iteration という引数で10回分一気に解くことができます。\n",
    "response = sampler.sample_ising(h, J)\n",
    "response.states"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4mekWlvTQyO4"
   },
   "source": [
    "では response.states をみてみると、10回分の解が入っていることがわかります。  \n",
    "今回は問題が簡単なので10回といても毎回同じ答え [1,-1,1] になっています。\n",
    "次はエネルギーを見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jgsaKb4OQyO5",
    "outputId": "21940830-0aa7-4117-f5f3-e1f15955dc2b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0]"
      ]
     },
     "execution_count": 6,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.energies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NYAnma_WQyO7"
   },
   "source": [
    "エネルギーももちろん10回とも同じ値を取っています。  \n",
    "`response.states`に入っている解はリストになっているので問題をセットした時の `a, b, c`という文字列との対応がわかりません。それは`response.indices`に入っています。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "5bSHlGo4QyO8",
    "outputId": "eaf45694-87dc-4015-ca71-831a9516a5ee"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a', 'b', 'c']"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.indices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cnEFAvRHQyPB"
   },
   "source": [
    "添字と状態を対応づけたいときは 自分で ``dict(zip(response.indices, response.states[0]))`` などを使うか .samples を呼んでください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4AOxD6mNQyPC",
    "outputId": "9d3a9106-d2b9-4870-85d7-2e4b1cf9c6a4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1},\n",
       " {'a': 1, 'b': 1, 'c': -1}]"
      ]
     },
     "execution_count": 8,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5rf7wB7LQyPJ"
   },
   "source": [
    "最小エネルギー値を持った解のみが知りたいときは `.min_samples` が便利です。\n",
    "解が縮退していた場合 `min_samples['min_states']` には複数の解があるかもしれないことに気をつけてください。\n",
    "\n",
    "> 縮退 : 異なった解(状態)が同じエネルギー値(コスト値)を持つこと"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-J1utQATQyPK",
    "outputId": "839e1260-3b1c-432d-a4b6-7b318ba1048c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'min_states': array([[ 1,  1, -1]]),\n",
       " 'num_occurrences': array([10]),\n",
       " 'min_energy': -4.0}"
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.min_samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zxyro6tTQyPN"
   },
   "source": [
    "## QUBOを解いてみる\n",
    "\n",
    "社会の問題を解きたい場合は Ising モデルよりも QUBO(Quadratic unconstraited binary optimization)として定式化した方が素直な場合が多いです。基本的には上記のIsing モデルを使って解いた場合と同じです。\n",
    "\n",
    "QUBOは以下のように書かれます。\n",
    "\n",
    "$$H(\\{q_i\\}) = \\sum_{i\\geq j} Q_{ij}q_i q_j$$\n",
    "$$q_i \\in \\{0, 1\\}$$\n",
    "\n",
    "Ising モデルと違うのは2値変数が0 と 1を取ることです。$\\sum, Q_{ij}$の取り方には他にもやり方がありますが($Q_{ij}$を対称行列にする)、今回は上記のように定式化しておきます。\n",
    "\n",
    "> Ising モデル と QUBO は相互変換が可能という意味で等価です。\n",
    "> $q_i = (\\sigma_i + 1)/2$という変換式で変換が可能です。\n",
    "\n",
    "QUBOでは$Q_{ij}$が与える問題で、$H(\\{q_i\\})$を最小化する0, 1の組み合わせ$\\{q_i\\}$を探せという問題になります。ほぼIsingモデルと一緒です。\n",
    "\n",
    "また$q_i^2 = q_i$なので(0, 1しか値を取らないことからわかる)以下のように書き分けることができます。\n",
    "\n",
    "$$H(\\{q_i\\}) = \\sum_{i > j} Q_{ij}q_i q_j + \\sum_i Q_{ii} q_i$$\n",
    "\n",
    "つまり$Q_{ij}$の添字が同じところは $q_i$の1次項の係数に対応します。\n",
    "\n",
    "OpenJijで解いてみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sTBvShg_QyPN",
    "outputId": "905fda81-bb24-44fc-f338-51a3d434b43e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 1, 0], [1, 1, 0], [1, 1, 0]]"
      ]
     },
     "execution_count": 10,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q_ij を辞書型でつくります。\n",
    "Q = {(0, 0): -1, (0, 1): -1, (1, 2): 1, (2, 2): 1}\n",
    "sampler = oj.SASampler(iteration=3)\n",
    "# QUBOを解く時は .sample_qubo を使いましょう\n",
    "response = sampler.sample_qubo(Q)\n",
    "response.states"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CxbDNkSuQyPU"
   },
   "source": [
    "QUBOでは変数が 0, 1なので 0, 1で解がでていることがわかります。  \n",
    "このような感じでOpenJij では IsingモデルとQUBOの最適化問題を解くことができます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8IRw4pHOQyPV"
   },
   "source": [
    "## 少し難しい問題を解いてみる\n",
    "\n",
    "上で解いた問題は簡単すぎたので少し難しい問題を解いてみましょう。\n",
    "\n",
    "変数の数が50個でランダムに$Q_{ij}$が振られたQUBOを解いてみたいと思います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "38dnpaliQyPW"
   },
   "outputs": [],
   "source": [
    "N = 50\n",
    "# ランダムにQij を作る\n",
    "import random\n",
    "Q = {(i, j): random.uniform(-1, 1) for i in range(N) for j in range(i+1, N)}\n",
    "\n",
    "# OpenJijで解く\n",
    "sampler = oj.SASampler(iteration=100)\n",
    "response = sampler.sample_qubo(Q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zcqPnIHaQyPb",
    "outputId": "1f5b70ab-579e-4e04-cb22-4a46b4d37fcb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-46.435277356769575,\n",
       " -46.435277356769575,\n",
       " -45.99099675164143,\n",
       " -46.38082975608086,\n",
       " -45.95601255429061]"
      ]
     },
     "execution_count": 12,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# エネルギーを少しみてみます。\n",
    "response.energies[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "syclwqyyQyPg"
   },
   "source": [
    "エネルギーをみてみると先ほどとは違って違う値をとっていることがわかると思います。  \n",
    "ランダムにQij を振った場合、一般に問題は難しくなります。なのでSASamplerも毎回同じ解を出すとは限りません。  \n",
    "ではどのような解がでたのかエネルギーのヒストグラムで見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "TMJixSctQyPg",
    "outputId": "4ca64898-0885-4994-fe37-99916932e6be"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(response.energies, bins=15)\n",
    "plt.xlabel('Energy', fontsize=15)\n",
    "plt.ylabel('Frequency', fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "K61nEm6fQyPl"
   },
   "source": [
    "エネルギーが低ければ低いほど良いわけですが、たまにエネルギーが高い解もでていることがわかります。\n",
    "しかし半数近くがエネルギーが低い解として出ているようです。\n",
    "\n",
    "100回解いたわけですが、最適解はエネルギーが一番低い解なはずですから、解いた(サンプルした)解のうちエネルギーが一番低い解が最適解に近いはずなので、その解を.statesから探します。\n",
    "> 注意: SAは必ずしも最適解を出せないのでここでエネルギーが一番低い解を選んでも最適解であるという保証はありません。  \n",
    "> あくまで近似解です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nLPAkZqCQyPm",
    "outputId": "ed4d045a-9a1a-4b11-8655-7f6e68ac849e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'min_states': array([[0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n",
       "         0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1,\n",
       "         1, 0, 1, 0, 0, 1]]),\n",
       " 'num_occurrences': array([17]),\n",
       " 'min_energy': -46.44424507437836}"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "min_samples = response.min_samples\n",
    "\n",
    "min_samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XBp8gWZEQyPr"
   },
   "source": [
    "これでエネルギーが低い解を得ることができました。この`min_states`に入っている解が今回解いた近似解です。\n",
    "`min_states`に入っている解はエネルギーは同じですが、問題によってはスピンの配列がことなることもあります(エネルギーが同じで解が違う状態があることを「縮退している」と言います)。\n",
    "\n",
    "なので上記のようにしてエネルギーが低い状態を選んだあとにあとは、好みのスピン配列を`min_state`から選んで「問題を近似的に解いた。」\n",
    "ということになります。  \n",
    "\n",
    "次回は \"2-Evaluation\" で Time to solution や残留エネルギーなど解をはかる指標について説明します。"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "1-Introduction.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "openjij3",
   "language": "python",
   "name": "openjij3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
