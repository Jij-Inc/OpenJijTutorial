{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/1-Introduction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Y4hVgt6yQyOa"
   },
   "source": [
    "# 1-OpenJij 入門\n",
    "\n",
    "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/1-Introduction.ipynb)\n",
    "\n",
    "OpenJijは Isingモデル, QUBOのヒューリステック最適化ライブラリです。  \n",
    "最適化のコア部分はC++で実装されていますが、Pythonインターフェースを備えているため、Pythonで簡単に書くことができます。\n",
    "\n",
    "インストールにはpipを使用します。ただし、numpy を事前にインストールしておいてください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JZW9IAE9QyOd"
   },
   "outputs": [],
   "source": [
    "# !pip install openjij"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wyu_ZSisQyOg",
    "outputId": "09252d51-5c0a-43c7-af4f-95edea5170af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: openjij\r\n",
      "Version: 0.0.11\r\n",
      "Summary: Framework for the Ising model and QUBO\r\n",
      "Home-page: https://openjij.github.io/OpenJij/\r\n",
      "Author: Jij Inc.\r\n",
      "Author-email: openjij@j-ij.com\r\n",
      "License: Apache License 2.0\r\n",
      "Location: /Users/shonakamura/.pyenv/versions/3.6.9/lib/python3.6/site-packages\r\n",
      "Requires: numpy, dimod, requests\r\n",
      "Required-by: \r\n"
     ]
    }
   ],
   "source": [
    "!pip show openjij  # openjij == 0.0.11 を仮定します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "x9a_Imk1QyOn"
   },
   "source": [
    "### Ising model\n",
    "\n",
    "Ising model は統計物理学で扱われるモデルで、以下のように書かれます。\n",
    "\n",
    "$$H(\\{\\sigma_i\\}) = \\sum_{i > j} J_{ij}\\sigma_i \\sigma_j + \\sum_{i=1}^N h_i \\sigma_i$$\n",
    "$$\\sigma_i \\in \\{-1, 1\\}, i=1,\\cdots N$$\n",
    "\n",
    "ここで$H(\\{\\sigma_i\\})$はハミルトニアンと呼ばれます。エネルギーやコスト関数だと考えてください。  \n",
    "$\\sigma_i$は2値$(1, -1)$を取る変数です。  \n",
    "\n",
    "> $\\sigma_i$は物理ではスピンという物理量に対応するため、スピン変数もしくは単純にスピンと呼ばれることもあります。  \n",
    "> スピンとは小さな磁石のようなものです。-1 が磁石が上向き、1が下向きのように変数の値と物理(磁石の向き)が対応します。\n",
    "\n",
    "$H$は変数の組み合わせ$\\{\\sigma_i\\} = \\{\\sigma_1, \\sigma_2, \\cdots, \\sigma_N\\}$に依存します。  \n",
    "$J_{ij}, h_i$が与えられる問題を表しています。それぞれ相互作用係数、縦磁場と呼ばれます。\n",
    "\n",
    "OpenJijは$J_{ij} と h_i$が与えられたときに$H(\\{\\sigma_i\\})$を最小化するスピン変数の組み$\\{\\sigma_i\\}$を探してくれる数値計算ライブラリです。\n",
    "\n",
    "具体的な例を一つ見ましょう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "j0iZqoWtQyOn"
   },
   "source": [
    "## OpenJijに問題を投げてみる\n",
    "\n",
    "変数の数が$N=5$で縦磁場と相互作用が\n",
    "\n",
    "$$h_i = -1~\\text{for} ~\\forall i, ~ J_{ij} = -1~\\text{for} ~\\forall i, j$$\n",
    "\n",
    "の問題を考えてみましょう。全ての相互作用がマイナスなので、各スピン変数は同じ値をとった方がエネルギーは低くなることがわかります。また縦磁場は全てマイナスなので、各スピンは1の値をとった方がエネルギーが低くなります。  \n",
    "よってこの答えは $\\{\\sigma_i\\} = \\{1, 1, 1, 1, 1\\}$になります。\n",
    "\n",
    "ではこれを再現することをOpenJijを用いて計算しましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h_i:  {0: -1, 1: -1, 2: -1, 3: -1, 4: -1}\n",
      "Jij:  {(0, 1): -1, (0, 2): -1, (0, 3): -1, (0, 4): -1, (1, 2): -1, (1, 3): -1, (1, 4): -1, (2, 3): -1, (2, 4): -1, (3, 4): -1}\n"
     ]
    }
   ],
   "source": [
    "import openjij as oj\n",
    "\n",
    "# 問題を表す縦磁場と相互作用を作ります。OpenJijでは辞書型で問題を受け付けます。\n",
    "N = 5\n",
    "h = {i: -1 for i in range(N)}\n",
    "J = {(i, j): -1 for i in range(N) for j in range(i+1, N)}\n",
    "\n",
    "print('h_i: ', h)\n",
    "print('Jij: ', J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 1 1 1 1]]\n",
      "[{0: 1, 1: 1, 2: 1, 3: 1, 4: 1}]\n"
     ]
    }
   ],
   "source": [
    "# まず問題を解いてくれるSamplerのインスタンスを作ります。\n",
    "# このインスタンスの選択で問題を解くアルゴリズムを選択できます。\n",
    "sampler = oj.SASampler()\n",
    "# samplerのメソッドに問題(h, J)を投げて問題を解きます。\n",
    "response = sampler.sample_ising(h, J)\n",
    "\n",
    "# 計算した結果(状態)は response.states に入っています。\n",
    "print(response.states)\n",
    "\n",
    "# もしくは添字付きでみるには samples関数 を用います。\n",
    "print([s for s in response.samples()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "feViwN6zQyO0"
   },
   "source": [
    "## OpenJijの解説\n",
    "\n",
    "上述のコードの解説をします。  \n",
    "OpenJijは現在インターフェースを2つ備えており、上記で使ったものはD-Wave Oceanと同じインターフェースになっています。そのため、OpenJijで慣れておけばD-Wave Oceanへの変更がスムーズです。\n",
    "\n",
    "> もう一つのインターフェースについてはここでは解説しませんが、OpenJijの仕組み`graph, method, algorithm`を直接使うことで拡張のしやすさを備えています。ここでは上のセルで扱ったインターフェースを使えるようになれば十分でしょう。\n",
    "\n",
    "### Sampler\n",
    "\n",
    "先ほどは問題を辞書型で作ったあとに、Samplerのインスタンスを作りました。\n",
    "```python\n",
    "sampler = oj.SASampler()\n",
    "```\n",
    "ここでこのSamplerというのがどのようなアルゴリズム、マシンを使うかを選択しています。他のアルゴリズムを試したい時はこのSamplerを変更します。\n",
    "\n",
    "> OpenJijで扱っているアルゴリズムはヒューリスティックな確率アルゴリズムです。問題を解くたびに返す解が違ったり、必ずしも最適解を得ることができません。\n",
    "> よって複数回問題を解き、その中でよい解を探すという手法をとります。そのため、ここでは解をサンプリングするという気持ちを込めてSamplerと呼んでいます。\n",
    "\n",
    "上のセルで用いた`SASampler`は`Simulated Annealing`というアルゴリズムを用いて、解をサンプリングしてくるSamplerです。  \n",
    "他にも\n",
    "\n",
    "- SQASampler : Simulated Quantum Annealing(SQA) という量子アニーリングを古典コンピュータでシミュレーションするアルゴリズム\n",
    "- GPUSQASampler : SQAをGPUで実行するSamplerです。Chimeraグラフという特殊な構造のみが現状扱える. 不安定.\n",
    "\n",
    "のSamplerが用意されています。\n",
    "\n",
    "### sample_ising(h, J)\n",
    "上述のとおり、問題を解く際は`.sample_ising(h, J)`のように縦磁場と相互作用を変数として代入して投入します。\n",
    "\n",
    "後述しますた、Isingモデルと等価なQUBOの最適化を行う時は`.sample_qubo(Q)`を用います。\n",
    "\n",
    "### Response\n",
    "\n",
    "`.sample_ising(h, J)`はResponseクラスを返します。ResponseクラスにはSamplerが解いて出てきた解と各解のエネルギーが入っています。\n",
    "\n",
    "- .states :\n",
    "    - type : list(list(int))\n",
    "    - iteration回数の解が格納されている\n",
    "    > 物理ではスピンの配列(解)を状態と呼ぶことがあります。.statesにはiteration回だけ解いた解が格納されているので複数の状態を格納しているという気持ちを込めて .states としています。\n",
    "- .energies:\n",
    "    - type : list(float)\n",
    "    - iteration回数分の各解のエネルギーが格納されている\n",
    "- .indices:\n",
    "    - type: list(object)\n",
    "    - 解がlistでstatesに入っているが、それに対応する各スピンの添字を格納されている\n",
    "- .first.sample:\n",
    "    - type: dict\n",
    "    - 最小エネルギー状態を取るときの状態が格納されている\n",
    "- .first.energy:\n",
    "    - type: float\n",
    "    - 最小エネルギーの値\n",
    "\n",
    "というパラメータが参照できます。実際にコードを見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': 1, 'b': 1, 'c': -1}\n",
      "-4.0\n"
     ]
    }
   ],
   "source": [
    "# 実は h, J の添字を示す、辞書のkeyは数値以外も扱うことができます。\n",
    "h = {'a': -1, 'b': -1}\n",
    "J = {('a', 'b'): -1, ('b', 'c'): 1}\n",
    "# num_reads という引数に値を代入することで、SAを10回試行する計算を一度の命令で解くことができます。\n",
    "sampler = oj.SASampler(num_reads=10)  \n",
    "response = sampler.sample_ising(h, J)\n",
    "print(response.first.sample)\n",
    "print(response.first.energy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]\n",
      " [ 1  1 -1]]\n"
     ]
    }
   ],
   "source": [
    "# response.states を見てみましょう。10回分の解が入っていることがわかります。\n",
    "print(response.states)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4mekWlvTQyO4"
   },
   "source": [
    "> num_reads などコンストラクタで渡すパラメータは   \n",
    "> .sample_ising などのサンプリングを実行するメソッドで上書きすることができます.\n",
    "> ```\n",
    "> response = sampler.sample_ising(h, J, num_reads=2)\n",
    "> response.states\n",
    "> > [[1, 1, -1],[1, 1, -1]]\n",
    "> ```\n",
    "\n",
    "今回は問題が簡単なので、10回とも同じ答え [1,1,-1] になっていることがわかります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4., -4., -4., -4., -4., -4., -4., -4., -4., -4.])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 次にエネルギーを見てみましょう。\n",
    "response.energies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NYAnma_WQyO7"
   },
   "source": [
    "エネルギーの値を10回とも同じ値を取っていることがわかります。  \n",
    "`response.states`に入っている解はリストになっているため、問題をセットした時の `a, b, c`という文字列との対応がわかりません。それを調べるために`response.indices`を見てみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a', 'b', 'c']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.indices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5rf7wB7LQyPJ"
   },
   "source": [
    "最小のエネルギー値を持った状態のみが知りたい場合には `.first` が便利です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-J1utQATQyPK",
    "outputId": "839e1260-3b1c-432d-a4b6-7b318ba1048c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sample(sample={'a': 1, 'b': 1, 'c': -1}, energy=-4.0, num_occurrences=1)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response.first"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zxyro6tTQyPN"
   },
   "source": [
    "## QUBOを解いてみる\n",
    "\n",
    "社会の実問題を解きたい場合には、Ising modelよりも QUBO(Quadratic unconstraited binary optimization)として定式化した方が素直な場合が多いです。基本的には上述のIsing modelを使って解いた場合と同じです。\n",
    "\n",
    "QUBOは以下のように書かれます。\n",
    "\n",
    "$$H(\\{q_i\\}) = \\sum_{i\\geq j} Q_{ij}q_i q_j$$\n",
    "$$q_i \\in \\{0, 1\\}$$\n",
    "\n",
    "Ising modelとの違いは、2値変数が0 と 1のバイナリ変数であることです。$\\sum, Q_{ij}$の取り方には他にもやり方(例えば$Q_{ij}$を対称行列にするなど)がありますが、今回は上式のように定式化しておきましょう。\n",
    "\n",
    "> Ising モデル と QUBO は相互変換が可能という意味で等価です。\n",
    "> $q_i = (\\sigma_i + 1)/2$という変換式を用いることで、変換が可能です。\n",
    "\n",
    "QUBOでは$Q_{ij}$が与える問題で、$H(\\{q_i\\})$を最小化する0, 1の組み合わせ$\\{q_i\\}$を探しましょうという問題になります。ほぼIsing modelと一緒です。\n",
    "\n",
    "また$q_i$はバイナリ変数なので、$q_i^2 = q_i$であることがわかります。よって上式を以下のように書き分けることができます。\n",
    "\n",
    "$$H(\\{q_i\\}) = \\sum_{i > j} Q_{ij}q_i q_j + \\sum_i Q_{ii} q_i$$\n",
    "\n",
    "$Q_{ij}$の添字が同じところは $q_i$の1次の項の係数に対応します。\n",
    "\n",
    "これをOpenJijで解いてみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 1 0]]\n"
     ]
    }
   ],
   "source": [
    "# Q_ij を辞書型でつくります。\n",
    "Q = {(0, 0): -1, (0, 1): -1, (1, 2): 1, (2, 2): 1}\n",
    "sampler = oj.SASampler()\n",
    "# QUBOを解く時は .sample_qubo を使いましょう\n",
    "response = sampler.sample_qubo(Q)\n",
    "print(response.states)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CxbDNkSuQyPU"
   },
   "source": [
    "QUBOでは変数が 0, 1のため、解も 0, 1で出力されていることがわかります。  \n",
    "このようにOpenJij を用いて Ising modelとQUBOの最適化問題を解くことができます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8IRw4pHOQyPV"
   },
   "source": [
    "## 少し難しい問題を解いてみる\n",
    "\n",
    "これまで解いてきた問題は簡単すぎたので、少し難しい問題を解いてみましょう。\n",
    "\n",
    "今度は変数の数が50個でランダムに$Q_{ij}$が振られたQUBOを解いてみたいと思います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 50\n",
    "# ランダムにQij を作る\n",
    "import random\n",
    "Q = {(i, j): random.uniform(-1, 1) for i in range(N) for j in range(i+1, N)}\n",
    "\n",
    "# OpenJijで解く\n",
    "sampler = oj.SASampler()\n",
    "response = sampler.sample_qubo(Q, num_reads=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-60.74324002, -60.83273331, -60.74324002, -60.38951291,\n",
       "       -60.83273331])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# エネルギーを少しみてみます。\n",
    "response.energies[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "syclwqyyQyPg"
   },
   "source": [
    "エネルギーを見てみると、先ほどの例とは異なり違う値をとっていることがわかります。  \n",
    "ランダムにQij を与えた場合、一般に問題は難しくなります。よってSASamplerも毎回同じ解を出しません。  \n",
    "ではどのような解がでたのかを、エネルギーのヒストグラムで可視化してみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(response.energies, bins=15)\n",
    "plt.xlabel('Energy', fontsize=15)\n",
    "plt.ylabel('Frequency', fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "K61nEm6fQyPl"
   },
   "source": [
    "エネルギーが低いほど良い状態を算出したことになりますが、稀にエネルギーが高い状態も算出されていることが上のヒストグラムからわかります。しかし大半の計算結果はエネルギーが最低の状態を算出しています。\n",
    "解いた(サンプルした)状態のうち一番低い解が最適解に近いはずなので、その解を.statesから探しましょう。\n",
    "> 注意: SAは必ずしも最適解を導くものではありません。よってエネルギーが一番低い解を選んでも最適解であるという保証はありません。あくまで近似解です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sample(sample={0: 1, 1: 1, 2: 0, 3: 0, 4: 0, 5: 0, 6: 1, 7: 1, 8: 0, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 0, 16: 1, 17: 1, 18: 0, 19: 0, 20: 1, 21: 0, 22: 0, 23: 1, 24: 1, 25: 1, 26: 1, 27: 0, 28: 0, 29: 1, 30: 0, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 0, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 0, 46: 0, 47: 1, 48: 0, 49: 0}, energy=-60.83273331169611, num_occurrences=1)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "min_samples = response.first\n",
    "\n",
    "min_samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XBp8gWZEQyPr"
   },
   "source": [
    "これでエネルギーが最も低い解を得ることができました。この`min_samples`に入っている状態が、今回得られた近似解です。これで「問題を近似的に解いた」ということになります。  \n",
    "\n",
    "次回は \"2-Evaluation\" で Time to Solution や残留エネルギーなど、解をはかる指標について説明します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "1-Introduction.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
