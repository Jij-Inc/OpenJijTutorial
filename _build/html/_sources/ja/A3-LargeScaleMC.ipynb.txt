{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/A3-LargeScaleMC.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A3 - 古典イジング模型\n",
    "\n",
    "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/OpenJij/OpenJijTutorial/blob/master/ja/A3-LargeScaleMC.ipynb)\n",
    "\n",
    "この章ではOpenJijのcore interface (core python interface)の使い方を説明し、簡単な計算のデモンストレーションを行います。\n",
    "\n",
    "core interfaceは前回までのチュートリアルよりも下部のレイヤーのAPIとなるため、対象読者としては前回までのOpenJijチュートリアルを一通り終えて、イジングモデルやモンテカルロ法などの用語を知っている方を想定しており、\n",
    "\n",
    "* 最適化問題だけでなくサンプリングや研究用途などより専門的な用途にOpenJijを用いたい\n",
    "* アニーリングスケジュールの設定や使用するアルゴリズム等を直接触りたい\n",
    "\n",
    "といった目的に使用できます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "前回ではスピン数$N=5$の小さいシステムでのデモンストレーションを行いましたが、この章ではさらに大規模な計算を通してOpenJij core interfaceの機能、使い方をより詳しく見ていきます。\n",
    "\n",
    "題材としてランダムイジング模型を取り上げます。この模型は、ハミルトニアンが\n",
    "\\begin{align}\n",
    "H &= \\sum_{i<j}J_{ij}\\sigma_i \\sigma_j + \\sum_{i=1}^{N}h_i \\sigma_i \\\\\n",
    "\\sigma_i &= \\pm 1 (i=1 \\cdots N)\n",
    "\\end{align}\n",
    "で与えられて、$J_{ij}, h_{i}$が$(i,j)$に対して様々な値を持つ模型です。  \n",
    "様々な種類の最適化問題がこのような模型の一番低いエネルギーを求める問題となりますが、エネルギーの最も低い状態を実現する$\\sigma_i$を計算するには一般に非常に難しいです。\n",
    "\n",
    "## 問題の定義 - Graph -\n",
    "\n",
    "問題を定義してみましょう。`graph`の中の**Dense**モジュールが必要となります。\n",
    "> `graph`中には基本的に**Dense**モジュールと**Sparse**モジュールがあり、今回の例のように全ての$J_{ij}$で値が定義されている場合には**Dense**モジュールが適しています。多くの$J_{ij}$の要素が0の場合には**Sparse**が適しています。使い方はどちらもほぼ変わりません。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cxxjij.graph as G\n",
    "#問題サイズを100とします。\n",
    "N = 100\n",
    "\n",
    "graph = G.Dense(N)\n",
    "#sparseの場合\n",
    "#graph = G.Sparse(N)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$J_{ij}, h_i$を設定します。今回は平均0、標準偏差1のGauss分布から生成される値を設定します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: numpy in /home/jiko/.local/lib/python3.8/site-packages (1.18.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install numpy #乱数生成にnumpyを使います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "mu, sigma = 0, 1\n",
    "\n",
    "for i in range(N):\n",
    "    for j in range(N):\n",
    "        #Jijの値が大きくなりすぎてしまうので、全体の係数を1/Nしています。\n",
    "        graph[i,j] = 0 if i == j else np.random.normal()/N\n",
    "\n",
    "for i in range(N):\n",
    "    graph[i] = np.random.normal()/N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ここで、縦磁場に関しては、`graph[i]`でも、`graph[i,i]`でもどちらでもアクセスできます。\n",
    "\n",
    "また、イジングモデルの定義上、$J_{ij}$と$J_{ji}$は自動で同じ値となります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5\n",
      "0.5\n",
      "-0.6\n",
      "-0.6\n"
     ]
    }
   ],
   "source": [
    "graph[20] = 0.5\n",
    "print(graph[20,20])\n",
    "print(graph[20])\n",
    "graph[12,34] = -0.6\n",
    "print(graph[12,34])\n",
    "print(graph[34,12])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Dense** (および**Sprase**)は以下のメソッドを持っています。\n",
    "\n",
    "- .gen_spin(seed)  \n",
    "    乱数生成のためのseedを与えると、システムサイズ (ここでは$N=100$)分のスピン列を出力します。\n",
    "    seedがない場合にはランダムにseedが決定されます。\n",
    "- .size()  \n",
    "    問題のサイズ($N$)を表示します。\n",
    "- .adj_nodes(i)  \n",
    "    インデックス$i$に隣接するノード一覧を表示します。\n",
    "- .calc_energy(spin)  \n",
    "    スピン列spinを与えられた際に、エネルギー\n",
    "    \\begin{align}  \n",
    "    H &= \\sum_{i<j}J_{ij}\\sigma_i \\sigma_j + \\sum_{i=1}^{N}h_i \\sigma_i\n",
    "    \\end{align}\n",
    "    を計算します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## システムの設定 - System -\n",
    "\n",
    "続いて計算を行うためのシステムを定義します。ここで古典イジング模型か横磁場イジング模型か、また別の模型にするか等を選べます。\n",
    "\n",
    "まずは古典イジング模型のシステムを作成してみます。`system.make_classical_ising`で作成できます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cxxjij.system as S\n",
    "\n",
    "mysystem = S.make_classical_ising(graph.gen_spin(), graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ここで、引数の1つめにはランダムに生成したスピン、2つめはGraphそのものを代入しています。  \n",
    "これにより初期スピン配位が`graph.gen_spin()`となる古典イジング模型のシステムが作成できます。\n",
    "> `system.make_classical_ising`は内部でGraphとspinをそのまま保持しています。実装は[ここ](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/system/classical_ising.hpp#L37)にあり、63行目でメンバ変数\n",
    "```cpp\n",
    "graph::Spins spin;\n",
    "const GraphType interaction;\n",
    "```\n",
    "が定義されています。  \n",
    "古典イジング模型に関しては、行列演算ライブラリEigenを用いて最適化されたシステムである`system.make_classical_ising_Eigen`も用意しています。(実装は[ここ](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/system/classical_ising.hpp#L78))   \n",
    "計算速度はこちらのほうが速いので**実際の用途では`system.make_classical_ising_Eigen`を使うことをおすすめします。**\n",
    "\n",
    "システムに直接アクセスして、値を読むこともできます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1]\n"
     ]
    }
   ],
   "source": [
    "print(mysystem.spin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "古典イジング模型以外にも様々なシステムが用意されており、用途別に使うことが出来ます。また、Systemによって初期化の方法は多少異なります。  \n",
    "後ほど少しずつ紹介していきます。\n",
    "\n",
    "## アルゴリズムの実行 -Updater, Algorithm-\n",
    "\n",
    "Systemを定義した後はUpdaterを選択してAlgorithmを実行していきます。  \n",
    "Systemに大して使用できるUpdaterは決められており、古典イジング模型に対するUpdaterは主に\n",
    "\n",
    "- [SingleSpinFlip](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/updater/single_spin_flip.hpp#L40) (メトロポリス・ヘイスティング法によるスピン1つずつのアップデート)\n",
    "- [SwendsenWang](https://github.com/OpenJij/OpenJij/blob/ec41aecfbac7e4c895e1e7a1718f06eb7ffae0ba/src/updater/swendsen_wang.hpp#L45) (SwendsenWang法によるクラスターアップデート)\n",
    "\n",
    "が用意されています。  \n",
    "Algorithmを実行するにはまず**スケジュールリスト**が必要となるため、まずスケジュールリストを作成するところから始めます。\n",
    "\n",
    "### スケジュールリスト\n",
    "\n",
    "スケジュールリストは`(パラメータ, モンテカルロステップ数)`のリストで与えられ、パラメータにいれる値はSystemによって異なります。例えば古典イジング模型ならばパラメータとして温度の逆数である逆温度$\\beta$を設定します。\n",
    "例えばスケジュールリストとして"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "schedule_list = [(0.01, 10),(10, 80),(0.1, 30)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "と設定された場合、逆温度$\\beta=0.01$で10モンテカルロステップ、$\\beta=10$で80ステップ、$\\beta=0.1$で30ステップの計120モンテカルロステップを実行することを意味します。\n",
    "\n",
    "アニーリングを実行するにあたっては、逆温度は等比級数で増加させていくことが多いため、`utility`にある`make_classical_schedule_list`を使うと便利です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[((beta: 0.100000) mcs: 20), ((beta: 0.199474) mcs: 20), ((beta: 0.397897) mcs: 20), ((beta: 0.793701) mcs: 20), ((beta: 1.583223) mcs: 20), ((beta: 3.158114) mcs: 20), ((beta: 6.299605) mcs: 20), ((beta: 12.566053) mcs: 20), ((beta: 25.065966) mcs: 20), ((beta: 50.000000) mcs: 20)]\n"
     ]
    }
   ],
   "source": [
    "import cxxjij.utility as U\n",
    "schedule_list = U.make_classical_schedule_list(0.1, 50, 20, 10)\n",
    "print(schedule_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "上の例では$\\beta=0.1$から$\\beta=50$まで、各温度で20モンテカルロステップ計算しながら10段階で温度を変えていくため、計200モンテカルロステップの計算となります。\n",
    "\n",
    "### Algorithm\n",
    "\n",
    "続いて、Algorithmを実行していきます。`Algorithm_[Updater]_run`のように書くことで、指定したUpdaterで計算を行うことができます。次例ではSingleSpinFlipを用います。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cxxjij.algorithm as A\n",
    "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "一瞬で処理が終わりましたが、この間に計200モンテカルロステップの計算が終わっています。\n",
    "> `A.Algorithm_SingleSpinFlip_run(mysystem, seed, schedule_list)`とすることで、seedを固定したまま計算を行うことができます。結果に再現性をもたせたい際に使うことができます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "callbackを使用することでAlgorithmの実行中に1モンテカルロステップごとのシステムを取得することができます。古典イジング模型の場合は、システムとパラメータ (逆温度)を引数を持つ関数を作成すれば良いです。\n",
    "\n",
    "ためしにシステムのエネルギーの値を記録するcallbackを作ってみましょう"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "energies = []\n",
    "\n",
    "def callback_log_energy(system, beta):\n",
    "    #graphは以前にGraphモジュールにて定義したオブジェクトです\n",
    "    energies.append(graph.calc_energy(system.spin))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "このcallbackを用いて同じAlgorithmを実行します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#スケジュールをもっと長く取ります (計20000モンテカルロステップ)\n",
    "schedule_list = U.make_classical_schedule_list(0.1, 50, 200, 100)\n",
    "A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list, callback_log_energy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "記録したシステムのエネルギーを横軸をモンテカルロステップ、縦軸をエネルギーでプロットすると次のようになります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: matplotlib in /home/jiko/.local/lib/python3.8/site-packages (3.2.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /home/jiko/.local/lib/python3.8/site-packages (from matplotlib) (1.1.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /home/jiko/.local/lib/python3.8/site-packages (from matplotlib) (2.4.6)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /home/jiko/.local/lib/python3.8/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: numpy>=1.11 in /home/jiko/.local/lib/python3.8/site-packages (from matplotlib) (1.18.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/jiko/.local/lib/python3.8/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: setuptools in /home/jiko/.local/lib/python3.8/site-packages (from kiwisolver>=1.0.1->matplotlib) (45.2.0)\n",
      "Requirement already satisfied: six>=1.5 in /home/jiko/.local/lib/python3.8/site-packages (from python-dateutil>=2.1->matplotlib) (1.14.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(len(energies)), energies)\n",
    "plt.xlabel('Monte Carlo step')\n",
    "plt.ylabel('energy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "このように、アニーリングが進むに連れ徐々にエネルギーが低くなっているのが分かります。Algorithmの動作中にシステムの様子を知りたい時に有用です。\n",
    "\n",
    "## 結果の取得 -Result-\n",
    "\n",
    "`result.get_solution`で計算結果であるスピン列を取得できます。古典イジング模型の場合は直接`mysystem.spin`を参照すればスピン列を取得できますが、`result.get_solution`はそれ以外のシステムについてもスピン列を取得できます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "import cxxjij.result as R\n",
    "print(R.get_solution(mysystem))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "このスピン列がアニーリングによって得られた答えなので、ハミルトニアンの基底状態 (に近い状態)であることが期待されます。\n",
    "\n",
    "## `system.make_classical_ising_Eigen` \n",
    "\n",
    "注釈で述べたように、古典イジング模型には線形代数ライブラリである[Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page)で実装された`system.make_classical_ising_Eigen`があります。`system.make_classical_ising`との計算速度をシステムサイズを変えて比較してみましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEKCAYAAAAMzhLIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8GearUAAAgAElEQVR4nO3dd3jUdfLA8ffQUYoK6Il0QZQiCIFTQL1YUUFUEEE9u1jhRD0PC3piPSzngQjiqfxU9EC8kyI2JCAaRIqgdESliVKUXkPm98dkSQjJsimb75Z5PU8e2O9udie47uTTZkRVcc455/JTKugAnHPOxTZPFM4558LyROGccy4sTxTOOefC8kThnHMuLE8UzjnnwioTdADRUL16da1Xr17QYTjnXNyYPXv2BlWtkdd9CZUoRKQz0Llhw4bMmjUr6HCccy5uiMiK/O5LqKknVR2vqr2qVq0adCjOOZcwEipROOecK34JlShEpLOIDN+8eXPQoTjnXMJIqDUKVR0PjE9JSbk593179+5l9erV7Nq1K4DIXCQqVKhArVq1KFu2bNChOOdySKhEEc7q1aupXLky9erVQ0SCDsfloqps3LiR1atXU79+/aDDcS6+jBwJDz4IK1dCnTrwxBNw1VXF9vRJM/W0a9cuqlWr5kkiRokI1apV8xGfcwU1ciT06gUrVoCq/dmrl10vJgmVKA6168mTRGzz/z7OFcKDD8KOHQde27HDrheThEoUsaxv37688MIL+2+ff/753HTTTftv33PPPTz//POMGzeOp59+GoD333+fhQsX7n/Mn/70p2I7H/Lkk0/me1+9evVo3rw5LVu2pGXLlvTp0weAhx9+mEmTJhXL6zvnisnKlQW7XgieKPIzciTUqwelStmfRRzGtW/fnvT0dAAyMzPZsGEDCxYs2H9/eno67dq14+KLL6Zfv37AwYmiOIVLFABpaWnMnTuXuXPnMmjQIAAGDBjAOeecE5V4nHOFVLNm3tfr1Cm2l0ioRFFs22OjMOfXrl07pk+fDsCCBQto1qwZlStX5vfff2f37t0sWrSIVq1aMWLECO68807S09MZN24cf/3rX2nZsiXLly8H4N1336Vt27accMIJTJs2DbD1l+uvv57mzZtzyimnkJaWBrD/uUI6derElClT6NevHzt37qRly5ZcVYAFr+uuu44xY8YAMHHiRE488URat25Nnz596NSpEwDbt2/nhhtuoG3btpxyyimMHTt2fyyXXXYZHTt2pFGjRtx3332F/rd0zmVZtgx27jz4+mGH2YJ2MUmoXU/htsce4K67YO7c/O//6ivYvfvAazt2wI03wiuv5P09LVtCjqml3GrWrEmZMmVYuXIl6enpnHbaaaxZs4bp06dTtWpVmjdvTrly5fY/PjS66NSpE926ddt/PSMjg6+//pqJEyfy6KOPMmnSJIYMGYKI8N1337F48WLOO+88li5dmm8sTz/9NC+++CJzw/wbpKamUrp0aQCuvfZa+vbtu/++Xbt2ccstt/D5559Tv359evbsuf++J554grPOOovXXnuNTZs20bZt2/2jkLlz5/LNN99Qvnx5GjduTO/evaldu3a+MTjnwvj2WzjvPJv1ePxx+2yK0q6nhEoUxSZ3kjjU9Qi1a9eO9PR00tPTufvuu1mzZg3p6elUrVqV9u3bR/Qcl112GQCtW7fmp59+AuCLL76gd+/eAJx44onUrVs3bKKIRFpaGtWrV8/zvsWLF9OgQYP921h79uzJ8OHDAfjkk08YN24czz77LGBJZWXWXOnZZ59NaKNBkyZNWLFihScK5wrjq6/gggugUiWYMgVOPLFYF69zS85EEeY3f8DWJFbkUR+rbl37j1JIoXWK7777jmbNmlG7dm2ee+45qlSpwvXXXx/Rc5QvXx6A0qVLk5GREfaxZcqUITMzc//tkth6qqq89957NG7c+IDrM2bM2B87RBa/cy4PkybBJZfAscfa3+vWjfpL+hpFXp54wub4ciqGOb927doxYcIEjjrqKEqXLs1RRx3Fpk2bmD59Ou3atTvo8ZUrV2br1q2HfN7TTz+dkVnrJ0uXLmXlypU0btyYevXqMXfuXDIzM1m1ahVff/31/u8pW7Yse/fuLdTP0bhxY3744Yf9I5pRo0btv+/8889n8ODBqCoA33zzTaFewzmXh/ffh4suggYNYNq0EkkSkGCJotiqx151FQwfbv8RROzP4cOLPOfXvHlzNmzYwKmnnnrAtapVq+Y5zdOjRw+eeeYZTjnllP2L2Xm5/fbbyczMpHnz5lxxxRWMGDGC8uXL0759e+rXr0+TJk3o06cPrVq12v89vXr14uSTT853MTs1NXX/9thrrrnmgPsqVqzISy+9RMeO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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "N_list = [10, 20, 30, 50, 70, 80, 100, 150, 200, 300, 400, 500, 1000]\n",
    "\n",
    "#計算時間\n",
    "calctime = []\n",
    "#計算時間 (Eigen実装)\n",
    "calctime_eigen = []\n",
    "\n",
    "for N in N_list:\n",
    "    #Graphの初期化\n",
    "    graph = G.Dense(N)\n",
    "    for i in range(N):\n",
    "        for j in range(N):\n",
    "            #Jijの値が大きくなりすぎてしまうので、全体の係数を1/Nしています。\n",
    "            graph[i,j] = 0 if i == j else np.random.normal()/N\n",
    "\n",
    "    for i in range(N):\n",
    "        graph[i] = np.random.normal()/N\n",
    "    \n",
    "    #Systemの初期化\n",
    "    mysystem = S.make_classical_ising(graph.gen_spin(), graph)\n",
    "    mysystem_eigen = S.make_classical_ising_Eigen(graph.gen_spin(), graph)\n",
    "    \n",
    "    #スケジュールリスト (2000モンテカルロステップ)\n",
    "    schedule_list = U.make_classical_schedule_list(0.1, 50, 20, 100)\n",
    "    \n",
    "    t1 = time.time()\n",
    "    #アニーリング (Eigenなし)\n",
    "    A.Algorithm_SingleSpinFlip_run(mysystem, schedule_list)\n",
    "    t2 = time.time()\n",
    "    calctime.append(t2-t1)\n",
    "    \n",
    "    t1 = time.time()\n",
    "    #アニーリング (Eigenあり)\n",
    "    A.Algorithm_SingleSpinFlip_run(mysystem_eigen, schedule_list)\n",
    "    t2 = time.time()\n",
    "    calctime_eigen.append(t2-t1)\n",
    "\n",
    "#結果を両対数プロット\n",
    "plt.plot(N_list, calctime, 'ro-', label='Without Eigen')\n",
    "plt.plot(N_list, calctime_eigen, 'bx-', label='With Eigen')\n",
    "plt.xlabel('System size')\n",
    "plt.ylabel('Elapsed time[s]')\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "全体的にEigen実装のほうが計算が早く、大きいシステムサイズではほぼ10倍ほどのスピード差があります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## C++ core interface\n",
    "\n",
    "C++ core interfaceでも上記とほぼ同じことが可能ですが、多少の違いがあり、\n",
    "\n",
    "- seed値を入れる引数には、乱数生成器 (C++11 random)を代入する必要があります。今までのコードはC++で次のようになります。\n",
    "- Graphクラスで、$J_{ij}, h_i$へのアクセス方法が多少異なります。\n",
    "\n",
    "今までの内容をC++ core interfaceで記述すると次のようになります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```cpp\n",
    "#include <graph/all.hpp>\n",
    "#include <system/all.hpp>\n",
    "#include <updater/all.hpp>\n",
    "#include <algorithm/all.hpp>\n",
    "#include <result/all.hpp>\n",
    "#include <utility/schedule_list.hpp>\n",
    "#include <utility/random.hpp>\n",
    "#include <random>\n",
    "\n",
    "#include <iostream>\n",
    "\n",
    "using namespace openjij;\n",
    "\n",
    "int main(void){\n",
    "\n",
    "    //generate dense graph with size N=100\n",
    "    constexpr std::size_t N = 100;\n",
    "    auto dense = graph::Dense<double>(N);\n",
    "\n",
    "    //generate random engine\n",
    "    auto rand_engine = std::mt19937(0x1234);\n",
    "    //of course you can specify another random generator that is compatible with C++ random generator, say utility::Xorshift,\n",
    "    //auto rand_engine = utility::Xorshift(0x1234);\n",
    "    \n",
    "    //Gaussian distribution\n",
    "    auto gauss = std::normal_distribution<>{0, 1};\n",
    "\n",
    "    //set interactions\n",
    "    for(std::size_t i=0; i<N; i++){\n",
    "        for(std::size_t j=0; j<N; j++){\n",
    "            dense.J(i, j) = (i == j) ? 0 : gauss(rand_engine)/N;\n",
    "        }\n",
    "    }\n",
    "\n",
    "    //set local fields\n",
    "    for(std::size_t i=0; i<N; i++){\n",
    "        dense.h(i) = gauss(rand_engine);\n",
    "    }\n",
    "\n",
    "    //create classical Ising system\n",
    "    auto system = system::make_classical_ising(dense.gen_spin(rand_engine), dense);\n",
    "    //if you use classical Ising system with Eigen implementation, use\n",
    "    //auto system = system::make_classical_ising<system::USE_EIGEN>(dense.gen_spin(rand_engine), dense);\n",
    "\n",
    "    //generate schedule list\n",
    "    //from beta=0.1 to beta=50, 20 Monte Carlo step for each tempearature, 10 samples\n",
    "    auto schedule_list = utility::make_classical_schedule_list(0.1, 50, 20, 10);\n",
    "\n",
    "    //or in the case of classical system, you can specify arbitrary schedules by using a std::vector of utility::Schedule<system::classical_system>\n",
    "    //std::vector<utility::Schedule<system::classical_system>> schedule_list;\n",
    "    //utility::Schedule<system::classical_system> schedule;\n",
    "    //schedule.updater_parameter = {0.01};\n",
    "    //schedule.one_mc_step = 10; //number of Monte Carlo step per temperature\n",
    "    //schedule_list.push_back(schedule);\n",
    "    //\n",
    "    //schedule.updater_parameter = {10};\n",
    "    //schedule.one_mc_step = 80; //number of Monte Carlo step per temperature\n",
    "    //schedule_list.push_back(schedule);\n",
    "    //\n",
    "    //schedule.updater_parameter = {0.1};\n",
    "    //schedule.one_mc_step = 30; //number of Monte Carlo step per temperature\n",
    "    //schedule_list.push_back(schedule); //schedule_list -> [(0.01, 10), (10, 80), (0.1, 30)]\n",
    "\n",
    "\n",
    "    //do annealing (updater: SingleSpinFlip)\n",
    "    algorithm::Algorithm<updater::SingleSpinFlip>::run(system, rand_engine, schedule_list);\n",
    "\n",
    "    //show spins\n",
    "    std::cout << \"The result spins are [\";\n",
    "    for(auto&& elem : result::get_solution(system)){\n",
    "        std::cout << elem << \" \";\n",
    "    }\n",
    "\n",
    "    std::cout << \"]\" << std::endl;\n",
    "}\n",
    "\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
